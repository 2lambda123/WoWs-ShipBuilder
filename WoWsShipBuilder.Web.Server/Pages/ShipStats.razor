@page "/ship"
@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Core.Services
@using WoWsShipBuilder.Web.Utility
@using WoWsShipBuilder.Core.Data
@using WoWsShipBuilder.Core.Translations
@using System.Diagnostics
@inherits ReactiveComponentBase<ShipViewModel>
@inject NavigationManager navManager
@inject Localizer localizer
@inject IAppDataService appDataService
<PageTitle>Ship stats</PageTitle>

<MudPaper Outlined="true" Class="d-flex justify-center align-center ma-5">
    <MudImage Src="@(baseAddress + "_default.png")"/>
    <MudImage Src="@(baseAddress + "_default.png")"/>
    <MudImage Src="@(baseAddress + "_default.png")"/>
</MudPaper>

<MudContainer MaxWidth="MaxWidth.False">
    @if (!initialized)
    {
        <MudGrid>
            <MudItem xs="4">
                <MudStack>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px"/>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px"/>
                </MudStack>
            </MudItem>
            <MudItem xs="8">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100%"/>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudGrid>
        <MudItem xs="4">
            <MudStack>
                <CaptainSkillSelector ViewModel="@ViewModel.CaptainSkillSelectorViewModel"/>
                <SignalSelector ViewModel="@ViewModel.SignalSelectorViewModel"/>
            </MudStack>
        </MudItem>
        <MudItem xs="8">
            @if (ViewModel.ShipStatsControlViewModel?.CurrentShipStats is not null)
            {
                @foreach (var (name, value) in ViewModel.ShipStatsControlViewModel.CurrentShipStats.MainBatteryUI?.PropertyValueMapper ?? new())
                {
                    <MudStack Row="true">
                        <MudText>@Translation.ResourceManager.GetString(name)</MudText>
                        <MudText>@value</MudText>
                    </MudStack>
                }
            }
        </MudItem>
    </MudGrid>
    }
</MudContainer>


@code {

    private string baseAddress = @"https://wows-shipbuilder-data.s3.eu-central-1.amazonaws.com/images/ship/";

    private bool initialized = false;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        navManager.TryGetQueryString("shipIndex", out string shipIndex);
        navManager.LocationChanged += HandleLocationChanged;
        await LoadShipViewModel(shipIndex);
        await ViewModel.ShipStatsControlViewModel.UpdateShipStats(ViewModel.ShipModuleViewModel.SelectedModules.ToList(), new());
        // this.WhenAnyValue(x => x.ViewModel.ShipStatsControlViewModel.CurrentShipStats).Subscribe(_ => StateHasChanged());
        initialized = true;
    }
    
    private async Task LoadShipViewModel(string shipIndex)
    {
        var sw = new Stopwatch();
        sw.Start();
        var shipSummary = AppData.ShipSummaryList!.Single(x => x.Index.Equals(shipIndex));
        await appDataService.LoadNationFiles(shipSummary.Nation);
        Console.WriteLine("Files loaded: " + sw.Elapsed);
        var ship = await appDataService.GetShipFromSummary(shipSummary);
        var vmParams = new MainViewModelParams(ship, shipSummary, null);
        ViewModel = new(null, appDataService, vmParams);
        Console.WriteLine("VM created: " + sw.Elapsed);
        await ViewModel.InitializeData(vmParams);
        sw.Stop();
        Console.WriteLine("VM initizalized: " + sw.Elapsed);
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var uri = navManager.Uri;
        if (uri.Contains("/ship"))
        {
            navManager.TryGetQueryString("shipIndex", out string shipIndex);
            await LoadShipViewModel(shipIndex);
            StateHasChanged();
        }
        else
        {
            navManager.LocationChanged -= HandleLocationChanged;
        }
    }
}