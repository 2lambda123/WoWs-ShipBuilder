@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.Core.Data
@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Core.Settings
@using WoWsShipBuilder.Web.Services
@using Prometheus
@using ReactiveUI
@using WoWsShipBuilder.Core.Services
@using DynamicData
@using WoWsShipBuilder.Web.Dialogs
@using System.Net
@using System.Diagnostics
@using WoWsShipBuilder.Core.Builds
@using WoWsShipBuilder.Core.DataContainers
@using WoWsShipBuilder.Core.Extensions
@using WoWsShipBuilder.Web.Data
@using WoWsShipBuilder.Web.LinkShortening
@using WoWsShipBuilder.Web.Utility

@inject IHostEnvironment Environment
@inject ILocalizer Localizer
@inject IMetricsService MetricsService
@inject AppSettings AppSettings
@inject MouseEventInterop MouseEventInterop
@inject IDialogService DialogService
@inject NavigationManager NavManager
@inject IClipboardService ClipboardService
@inject ILinkShortener LinkShortener
@inject BuildHelper BuildHelper

@inherits ReactiveComponentBase<ShipViewModel>

@if (ViewModel is not null)
{
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Outlined="true" Class="py-2 px-15">
                <MudGrid Justify="Justify.Center">
                    <MudItem xs="12" md="2" Class="align-self-center d-flex justify-center">
                        <MudTextField @bind-Value="buildName" Label="Build:" Immediate Placeholder="Enter build name" Variant="Variant.Outlined" Margin="Margin.Dense"/>
                    </MudItem>
                    <MudItem xs="12" md="8" Class="@(GetShipAlign() + " d-flex justify-center")">
                        @if (ViewModel.PreviousShip is not null)
                        {
                            <MudStack Class="px-2 cursor-pointer" @onmouseup="@(args => UpdateToShip(args, CurrentTabId, ViewModel.PreviousShip))" AlignItems="AlignItems.Center" id="@(ViewModel.CurrentShipIndex + "_" + ViewModel.PreviousShip.Index + "_" + CurrentTabId)">
                                <MudImage Width="@GetImageWidth(false)" ObjectFit="ObjectFit.ScaleDown" Src="@(BaseAddress + ViewModel.PreviousShip.Index + ".png")"/>
                                <MudStack Row="true" Justify="Justify.Center" Spacing="1">
                                    <MudIcon ViewBox="-1 0 24 10" Icon="@Helpers.GetIconFromClass(ViewModel.PreviousShip.ShipClass, ViewModel.PreviousShip.Category)"/>
                                    <MudText Align="Align.Center">@GetShipTier(ViewModel.PreviousShip.Tier) @Localizer.GetGameLocalization(ViewModel.PreviousShip.Index + "_FULL").Localization</MudText>
                                </MudStack>
                            </MudStack>
                        }
                        <MudStack Class="px-2" AlignItems="AlignItems.Center">
                            <MudImage Width="@GetImageWidth(true)" ObjectFit="ObjectFit.ScaleDown" Src="@(BaseAddress + ViewModel.CurrentShipIndex + ".png")" Style="@GetBackgroundFlag(ViewModel.CurrentShip.Nation, ViewModel.CurrentShipIndex)"/>
                            <MudStack Row="true" Justify="Justify.Center" Spacing="1">
                                <MudIcon ViewBox="-1 0 24 10" Icon="@Helpers.GetIconFromClass(ViewModel.CurrentShip.ShipClass, ViewModel.CurrentShip.Category)"/>
                                <MudText Align="Align.Center" >@GetShipTier(ViewModel.CurrentShip.Tier) @Localizer.GetGameLocalization(ViewModel.CurrentShipIndex + "_FULL").Localization</MudText>
                            </MudStack>
                        </MudStack>
                        @if (ViewModel.NextShips is not null)
                        {
                            foreach (var ship in ViewModel.NextShips)
                            {
                                <MudStack key="@(ViewModel.CurrentShipIndex + "_" + ship.Index)" Class="px-2 cursor-pointer" @onmouseup="@(args => UpdateToShip(args, CurrentTabId, ship))" AlignItems="AlignItems.Center" id="@(ViewModel.CurrentShipIndex + "_" + ship.Index + "_" + CurrentTabId)">
                                    <MudImage Width="@GetImageWidth(false)" ObjectFit="ObjectFit.ScaleDown" Src="@(BaseAddress + ship.Index + ".png")"/>
                                    <MudStack Row="true" Justify="Justify.Center" Spacing="1">
                                        <MudIcon ViewBox="-1 0 24 10" Icon="@Helpers.GetIconFromClass(ship.ShipClass, ship.Category)"/>
                                        <MudText Align="Align.Center">@GetShipTier(ship.Tier) @Localizer.GetGameLocalization(ship.Index + "_FULL").Localization</MudText>
                                    </MudStack>
                                </MudStack>
                            }
                        }
                    </MudItem>
                    <MudItem xs="12" md="2" Class="align-self-center d-flex justify-center">
                        <MudButton Size="Size.Large" Variant="Variant.Filled" Color="Color.Primary" FullWidth StartIcon="@Icons.Material.Filled.Share" OnClick="@OnShareBuildClicked">
                            @Localizer.GetAppLocalization(Translation.MainWindow_ShareBuild).Localization
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        </MudItem>
        @if (!(initialized && SettingsInitialized))
        {
            <MudItem xs="12" md="6" lg="4" xl="3">
                <MudStack>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px"/>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px"/>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="450px"/>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="450px"/>
                </MudStack>
            </MudItem>
            <MudItem xs="12" md="6" lg="8" xl="9">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100%"/>
            </MudItem>
        }
        else
        {
            <MudItem xs="12" md="6" lg="4" xl="3">
                <MudStack>
                    <ShipModulesSelector ViewModel="@ViewModel.ShipModuleViewModel"/>
                    <ShipUpgradeSelector ViewModel="@ViewModel.UpgradePanelViewModel"/>
                    <ConsumableSelector ViewModel="@ViewModel.ConsumableViewModel"/>
                    <CaptainSkillSelector ViewModel="@ViewModel.CaptainSkillSelectorViewModel" ShipClass="@ViewModel.CurrentShip.ShipClass"/>
                    <SignalSelector ViewModel="@ViewModel.SignalSelectorViewModel"/>
                </MudStack>
            </MudItem>
            <MudItem xs="12" md="6" lg="8" xl="9">
                @if (ViewModel?.ShipStatsControlViewModel?.CurrentShipStats is not null)
                {
                    <ShipStatsComponent ViewModel="@ViewModel.ShipStatsControlViewModel" SaveBuildStringIntoLocal="@(_ => SaveBuildStringToLocalStorage())"/>
                }
            </MudItem>
        }
    </MudGrid>
}

@code {

    [Parameter]
    [EditorRequired]
    public string ShipIndex { get; set; } = default!;
    
    [Parameter]
    [EditorRequired]
    public Guid CurrentTabId { get; set; }

    [Parameter]
    public Func<Guid?, string, bool>? OnShipChanged { get; set; }

    [Parameter]
    public string? BuildString { get; set; }

    [Parameter]
    public ShipStatsContainer? CachedInstance { get; set; }

    [CascadingParameter]
    private Breakpoint Breakpoint { get; set; }

    [CascadingParameter(Name = "SettingsInitialized")]
    protected bool SettingsInitialized { get; set; }
        
    private const string BaseAddress = @"https://cdn.wowssb.com/images/individual/";

    private bool initialized;

    private bool shipChanged;

    private string buildName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        MetricsService.ShipPageCount.Inc();
        initialized = false;
        
        if (CachedInstance is not null)
        {
            ViewModel = CachedInstance.ViewModel;
            buildName = CachedInstance.buildName;
        }
        else
        {
            ViewModel = await LoadShipViewModel(ShipIndex);
            await ViewModel.ShipStatsControlViewModel!.UpdateShipStats(ViewModel.ShipModuleViewModel.SelectedModules.ToList(), new());   
        }
        
        initialized = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (shipChanged && ViewModel is not null)
        {
            shipChanged = false;
            var elementIds = new List<string>();
            if (ViewModel.PreviousShip is not null)
            {
                elementIds.Add(ViewModel.CurrentShipIndex + "_" + ViewModel.PreviousShip.Index + "_" + CurrentTabId);
            }
            if (ViewModel.NextShips is not null)
            {
                elementIds.AddRange(ViewModel.NextShips.Select(ship => ViewModel.CurrentShipIndex + "_" + ship.Index + "_" + CurrentTabId));
            }
            
            StateHasChanged();
            
            if (elementIds.Any())
            {
                await MouseEventInterop.PreventMiddleClickDefaultBatched(elementIds);
            }
        }
    }

    private async Task<ShipViewModel> LoadShipViewModel(string shipIndex)
    {
        MetricsService.ShipCount.WithLabels(shipIndex, Localizer.GetGameLocalization(shipIndex + "_FULL", AppConstants.DefaultCultureDetails).Localization).Inc();
        Build? build = null;
        using (MetricsService.ShipViewModelInitDuration.NewTimer())
        {
            if (!string.IsNullOrWhiteSpace(BuildString))
            {
                build = Build.CreateBuildFromString(BuildString);
                BuildString = null;
                buildName = build.BuildName;
            }

            var shipSummary = AppData.ShipSummaryList.Single(x => x.Index.Equals(shipIndex));
            var ship = AppData.FindShipFromSummary(shipSummary);
            var vmParams = new ShipViewModelParams(ship, shipSummary, build);

            ShipViewModel vm = new(null!, Localizer, vmParams);
            await vm.InitializeData(vmParams);
            shipChanged = true;
            return vm;
        }
    }

    private string GetBackgroundFlag(Nation shipNation, string shipIndex)
    {
    // "'background-image: url("/assets/nation_flags/flag_" + ViewModel.CurrentShip.Nation + ".png\")
        string imgName = shipIndex;
        if (!File.Exists(Path.Combine(Environment.ContentRootPath, "wwwroot", "assets", "nation_flags", $"flag_{shipIndex}.png")))
        {
            imgName = shipNation.ToString();
        }
        return $"background-image: url(\"/assets/nation_flags/flag_{imgName}.png\"); background-size: cover";
    }

    private int GetImageWidth(bool isCurrentShip)
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return isCurrentShip ? 100 : 70;
            default:
                return isCurrentShip ? 150 : 105;
        }
    }
    
    private string GetShipAlign()
    {
        return Breakpoint is Breakpoint.Xs or Breakpoint.Sm ? "align-start" : "align-end";
    }

    private string GetShipTier(int tier)
    {
        string t = tier switch
        {
            1 => "I",
            2 => "II",
            3 => "III",
            4 => "IV",
            5 => "V",
            6 => "VI",
            7 => "VII",
            8 => "VIII",
            9 => "IX",
            10 => "X",
            11 => "XI",
            _ => "NaN",
        };
        return t;
    }

    private async Task UpdateToShip(MouseEventArgs args, Guid currentTabId, ShipSummary? updateToShipSummary)
    {
        if (updateToShipSummary is not null)
        {
            if (args.Button == 1)
            {
                OnShipChanged?.Invoke(null, updateToShipSummary.Index);
                return;
            }
            if (OnShipChanged?.Invoke(currentTabId, updateToShipSummary.Index) ?? false)
            {
                ShipIndex = updateToShipSummary.Index;
                ViewModel = await LoadShipViewModel(ShipIndex);
                await ViewModel.ShipStatsControlViewModel!.UpdateShipStats(ViewModel.ShipModuleViewModel.SelectedModules.ToList(), new());
                StateHasChanged();
            }
        }
    }

    private async Task OnShareBuildClicked()
    {
        DialogOptions options = new()
        {
            NoHeader = true,
        };
        var parameters = new DialogParameters
        {
            ["ShortLinkDisabled"] = !LinkShortener.IsAvailable,
            ["BuildName"] = buildName,
        };
        var dialog = await DialogService.ShowAsync<BuildShareDialog>(string.Empty, parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is BuildShareResult shareResult)
        {
            buildName = shareResult.BuildName;
            var build = ViewModel!.CreateBuild(shareResult.BuildName);
            var buildString = build.CreateShortStringFromBuild();
            var buildUrl = $"{NavManager.BaseUri}ship?shipIndexes={build.ShipIndex}&build={WebUtility.UrlEncode(buildString)}";
            await ClipboardService.SetTextAsync(shareResult.CreateShortLink ? (await LinkShortener.CreateShortLink(buildUrl)).Link : buildUrl);
        }
    }
    
    private async Task SaveBuildStringToLocalStorage()
    {
        await BuildHelper.StoreBuildContainers(new() { GetBuildHelperContainer() });
    }

    public BuildHelper.BuildHelperContainer GetBuildHelperContainer()
    {
        List<(string, float)>? modifiers = ViewModel?.UpgradePanelViewModel.GetModifierList();
        modifiers?.AddRange(ViewModel?.ConsumableViewModel.GetModifiersList() ?? new List<(string, float)>());
        modifiers?.AddRange(ViewModel?.CaptainSkillSelectorViewModel?.GetModifiersList() ?? new List<(string, float)>());
        modifiers?.AddRange(ViewModel?.SignalSelectorViewModel?.GetModifierList() ?? new List<(string, float)>());
        
        var build = ViewModel!.CreateBuild(buildName);
        var buildString = build.CreateShortStringFromBuild();
        BuildHelper.BuildHelperContainer container = new(build.ShipIndex, buildString, modifiers, ViewModel?.ConsumableViewModel.ActivatedSlots);
        return container;
    }

    public async Task<ShipViewModel?> GetShipViewModel(string shipIndex, string? buildString)
    {
        BuildString = buildString;
        return await LoadShipViewModel(shipIndex);
    }

    public string GetBuildName()
    {
        return buildName;
    }
}