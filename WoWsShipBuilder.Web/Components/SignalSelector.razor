@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Core.Localization
@using WoWsShipBuilder.ViewModels.ShipVm;
@using WoWsShipBuilder.Core.DataContainers
@inherits ReactiveComponentBase<SignalSelectorViewModel>
@inject ILocalizer Localizer

@if (ViewModel is not null)
{
    <MudPaper Outlined="true" Class="pa-3">
        <MudGrid Justify="Justify.Center">
            <MudItem xs="12">
                <MudText Typo="Typo.body2" Align="Align.Center">@(Localizer.GetAppLocalization(nameof(Translation.SignalSelector_Flags)).Localization + ViewModel.SignalsNumber + "/8")</MudText>
            </MudItem>
            @foreach (var (_, signal) in ViewModel.SignalList.Where(x => !string.IsNullOrEmpty(x.Key)))
            {

                <MudItem xs="2" Class="d-flex justify-center" Style="@GetOrder(signal.Signal.SortOrder)">
                    <MudTooltip Placement="Placement.Right" Color="Color.Transparent">
                        <ChildContent>
                            <MudButton Class="pa-2" Variant="Variant.Outlined" Color="@(GetColorFromState(signal))" OnClick="@(() => OnSignalClick(signal))" Style="@(@GetImageBreakpointStyle() + GetImageStyle(signal))">
                                <MudImage ObjectFit="ObjectFit.ScaleDown" Width="@GetImageSize()" Height="@GetImageSize()" Src="@("/assets/signal_flags/" + signal.Signal.Name + ".png")"/>
                            </MudButton>
                        </ChildContent>
                        <TooltipContent>
                            <MudPaper Outlined="true">
                                <MudStack Spacing="0" Class="pa-2">
                                    <MudText Align="Align.Center" Typo="Typo.h6">@Localizer.GetGameLocalization(signal.Signal.Name).Localization</MudText>
                                    <MudDivider Light="true" Class="ma-1"/>
                                    @foreach (var (modifierName, modifierValue) in signal.Signal.Modifiers)
                                    {
                                        // this is here so we can have the call to the ModifierProcessor only once, to share the value between the if and the mudtext
                                        var modifierString = ModifierProcessor.GetUiModifierString(modifierName, modifierValue, ReturnFilter.All, Localizer);
                                        @if (!string.IsNullOrWhiteSpace(modifierString))
                                        {
                                            <MudText Align="Align.Left" Typo="Typo.body2" Style="white-space: break-spaces">@modifierString</MudText>
                                        }
                                    }
                                </MudStack>
                            </MudPaper>
                        </TooltipContent>
                    </MudTooltip>
                </MudItem>
            }
        </MudGrid>
    </MudPaper>    
}


@code {

    [CascadingParameter]
    private Breakpoint Breakpoint { get; set; }
    
    private Color GetColorFromState(SignalItemViewModel signalItem)
    {
        if (ViewModel!.SelectedSignals.Any(x => x.Name.Equals(signalItem.Signal.Name)))
        {
            return Color.Error;
        }
        else if (!signalItem.CanExecute)
        {
            return Color.Primary;
        }
        else
        {
            return Color.Secondary;
        }
    }

    private void OnSignalClick(SignalItemViewModel signal)
    {
        if (!signal.CanExecute) return;
        ViewModel!.SignalCommandExecute(signal.Signal);
    }

    private string GetOrder(int signalSortOrder)
    {
        return $"order: {signalSortOrder};";
    }

    private string GetImageStyle(SignalItemViewModel signal)
    {
        if (!signal.CanExecute && !ViewModel!.SelectedSignals.Any(x => x.Name.Equals(signal.Signal.Name)))
        {
            return @"opacity: 0.4";
        }
        return string.Empty;
    }
    
    private int GetImageSize()
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return 25;
                break;
            default:
                return 40;
                break;
        }
    }
    
    private string GetImageBreakpointStyle()
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return "min-width: 40px; width: 40px; height: 40px;";
                break;
            default:
                return "min-width: 55px; width: 55px; height: 55px;";
                break;
        }
    }

}