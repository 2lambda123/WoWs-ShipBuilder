@using WoWsShipBuilder.Core.Localization
@using WoWsShipBuilder.Core.Settings
@using WoWsShipBuilder.Web.Services
@using WoWsShipBuilder.Core.BuildCreator
@using WoWsShipBuilder.Core.Data
@using WoWsShipBuilder.Core.DataProvider
@using Prometheus
@using WoWsShipBuilder.Core.Services
@inherits ReactiveComponentBase<ShipViewModel>
@inject ILocalizer Localizer
@inject IAppDataService AppDataService
@inject AppSettings AppSettings
@inject IMetricsService MetricsService

<MudDialog>
    <TitleContent>
        <MudItem Class="d-flex align-center" Style="justify-content: center">
            <MudStack Row="true" Justify="Justify.SpaceEvenly" Class="mt-n1">
                <MudImage Src="@ShipImagePath" Height="45"/>
                <MudText Style="font-size: x-large" Class="mt-4">
                    @Localizer.GetGameLocalization(ShipIndex).Localization
                </MudText>
                <MudText Style="font-size: x-large" Class="mt-4">
                    @ShipTier
                </MudText>
                <MudIcon Icon="@ShipIconPath" Size="Size.Large" Class="mt-6 mb-n2"/>
                <MudImage Src="@ShipNationFlagPath" Height="45"/>
            </MudStack>
        </MudItem>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="overflow-y: auto">
            <MudStack Row="true" Style="@SetWrapping()">
                <MudStack>
                    <ShipModulesSelector ViewModel="@ViewModel?.ShipModuleViewModel"/>
                    <ShipUpgradeSelector ViewModel="@ViewModel?.UpgradePanelViewModel"/>
                    <ConsumableSelector ViewModel="@ViewModel?.ConsumableViewModel"/>
                    <SignalSelector ViewModel="@ViewModel?.SignalSelectorViewModel"/>
                </MudStack>
                <MudItem>
                    <CaptainSkillSelector ViewModel="@ViewModel?.CaptainSkillSelectorViewModel" ShipClass="@ViewModel!.CurrentShip!.ShipClass" ShowCaptainSkillsTalentsButton="false"/>
                    <MudTextField Value="buildName" Clearable="true" FullWidth="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Edit" Label="Build Name" Placeholder="Enter build name" Variant="Variant.Outlined" Class="mt-3"/>
                    <MudStack Row="true" Class="mt-3">
                        <MudTextField Value="buildString" Clearable="true" FullWidth="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Edit" Label="Alternative" Placeholder="Paste build string" Variant="Variant.Outlined"/>
                        <MudButton Disabled="@string.IsNullOrWhiteSpace(buildString)" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Class="mt-1">
                            Load build
                        </MudButton>
                    </MudStack>
                </MudItem>
            </MudStack>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Primary">
            @Localizer.GetAppLocalization(nameof(Translation.Cancel)).Localization
        </MudButton>
        <MudButton Color="Color.Info" OnClick="ReturnSelectedShells" Variant="Variant.Filled" Disabled="@string.IsNullOrWhiteSpace(buildName)">
            <MudText Typo="Typo.button">
                @Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_ConfirmButton)).Localization
            </MudText>
        </MudButton>
    </DialogActions>
</MudDialog>


@code {
    
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();
    
    [Parameter]
    public string ShipIndex { get; set; } = default!;
    [Parameter]
    public string ShipTier { get; set; } = default!;
    [Parameter]
    public string ShipIconPath { get; set; } = default!;
    [Parameter]
    public string ShipNationFlagPath { get; set; } = default!;
    [Parameter]
    public string ShipImagePath { get; set; } = default!;
    [Parameter]
    public Breakpoint Breakpoint { get; set; }

    private string buildName = default!;
    private string buildString = default!;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadShipViewModel(ShipIndex);
    }

    private async Task LoadShipViewModel(string shipIndex)
    {
        MetricsService.ShipCount.WithLabels(shipIndex).Inc();
        Build? build = null;
        using (MetricsService.ShipViewModelInitDuration.NewTimer())
        {
            var shipSummary = AppData.ShipSummaryList!.Single(x => x.Index.Equals(shipIndex));
            await AppDataService.LoadNationFiles(shipSummary.Nation);
            var ship = await AppDataService.GetShipFromSummary(shipSummary);
            var vmParams = new MainViewModelParams(ship!, shipSummary, build);
            ViewModel = new(null!, AppDataService, Localizer, AppSettings, vmParams);
            await ViewModel.InitializeData(vmParams);
        }
    }
    
    private void ReturnSelectedShells()
    {
        string build = default!;
        MudDialog.Close(DialogResult.Ok(build));
    }
    
    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private string SetWrapping()
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return "flex-wrap: wrap";
            default:
                return "flex-wrap: nowrap";
        }
    }

}