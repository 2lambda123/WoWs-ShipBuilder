@using WoWsShipBuilder.Core.Settings
@using WoWsShipBuilder.Web.Services
@using WoWsShipBuilder.Core.BuildCreator
@using WoWsShipBuilder.Core.Data
@using WoWsShipBuilder.Core.DataProvider
@using Prometheus
@using WoWsShipBuilder.Core.Services
@using WoWsShipBuilder.ViewModels.Helper
@using WoWsShipBuilder.ViewModels.Other
@using WoWsShipBuilder.ViewModels.ShipVm
@inherits ReactiveComponentBase<ShipViewModel>
@inject ILocalizer Localizer
@inject IAppDataService AppDataService
@inject AppSettings AppSettings
@inject IMetricsService MetricsService
@inject ISnackbar Snackbar

<MudDialog Style="overflow-y: auto; max-height: 70vh">
    <TitleContent>
        <MudItem Class="d-flex align-center" Style="justify-content: center">
            <MudStack Row="true" Justify="Justify.SpaceEvenly" Class="mt-n1">
                <MudImage Src="@ShipImagePath" Height="45"/>
                <MudText Style="font-size: x-large" Class="mt-4">
                    @Localizer.GetGameLocalization(ShipIndex).Localization
                </MudText>
                <MudText Style="font-size: x-large" Class="mt-4">
                    @ShipTier
                </MudText>
                <MudIcon Icon="@ShipIconPath" Size="Size.Large" Class="mt-6 mb-n2"/>
                <MudImage Src="@ShipNationFlagPath" Height="45"/>
            </MudStack>
        </MudItem>
    </TitleContent>
    <DialogContent>
        <MudStack Row="true" Style="@SetWrapping()">
            <MudStack>
                <ShipModulesSelector ViewModel="@shipModuleVm"/>
                <ShipUpgradeSelector ViewModel="@upgradesVm"/>
                <ConsumableSelector ViewModel="@consumableVm"/>
                <SignalSelector ViewModel="@signalVm"/>
            </MudStack>
            <div style="@SetMaxWidth()">
                <CaptainSkillSelector ViewModel="@captainVm" ShipClass="@ViewModel!.CurrentShip!.ShipClass" ShowCaptainSkillsTalentsButton="false"/>
                <MudTextField @bind-Value="buildName" Clearable="true" FullWidth="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Edit" Label="Build Name" Placeholder="Enter build name" Variant="Variant.Outlined" Class="mt-3"/>
                <MudStack Row="true" Class="mt-3">
                    <MudTextField @bind-Value="buildString" Clearable="true" FullWidth="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Edit" Label="Alternative" Placeholder="Paste build string" Variant="Variant.Outlined"/>
                    <MudButton Disabled="@string.IsNullOrWhiteSpace(buildString)" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Class="mt-1" OnClick="() => ImportBuild(ShipIndex)">
                        Import
                    </MudButton>
                </MudStack>
            </div>
        </MudStack>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Primary">
            @Localizer.GetAppLocalization(nameof(Translation.Cancel)).Localization
        </MudButton>
        <MudButton Color="Color.Error" OnClick="RemoveBuild" Variant="Variant.Filled">
            <MudText Typo="Typo.button">
                Delete
            </MudText>
        </MudButton>
        <MudButton Color="Color.Success" OnClick="ReturnBuild" Variant="Variant.Filled">
            <MudText Typo="Typo.button">
                Apply
            </MudText>
        </MudButton>
    </DialogActions>
</MudDialog>


@code {
    
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();
    
    [Parameter]
    public string ShipIndex { get; set; } = default!;
    [Parameter]
    public string ShipTier { get; set; } = default!;
    [Parameter]
    public string ShipIconPath { get; set; } = default!;
    [Parameter]
    public string ShipNationFlagPath { get; set; } = default!;
    [Parameter]
    public string ShipImagePath { get; set; } = default!;
    [Parameter]
    public ShipComparisonViewModel ShipComparisonVm { get; set; } = new();
    [Parameter]
    public Breakpoint Breakpoint { get; set; }

    private string buildName = string.Empty;
    private string buildString = string.Empty;

    private ShipModuleViewModel? shipModuleVm;
    private ConsumableViewModel? consumableVm;
    private CaptainSkillSelectorViewModel? captainVm;
    private UpgradePanelViewModelBase? upgradesVm;
    private SignalSelectorViewModel? signalVm;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await LoadShipViewModel(ShipIndex); 
        if (ShipComparisonVm.ContainsBuild(ShipIndex))
        {
            var build = ShipComparisonVm.CustomBuilds.First(x => x.ShipIndex.Equals(ShipIndex));
            buildName = build.BuildName;
            shipModuleVm = build.ModulesVm;
            consumableVm = build.ConsumableVm;
            captainVm = build.CaptainVm;
            upgradesVm = build.UpgradesVm;
            signalVm = build.SignalVm;
        }
        else
        {
            shipModuleVm = ViewModel?.ShipModuleViewModel!;
            consumableVm = ViewModel?.ConsumableViewModel!;
            captainVm = ViewModel?.CaptainSkillSelectorViewModel!;
            upgradesVm = ViewModel?.UpgradePanelViewModel!;
            signalVm = ViewModel?.SignalSelectorViewModel!;
        }
    }

    private async Task LoadShipViewModel(string shipIndex)
    {
        MetricsService.ShipCount.WithLabels(shipIndex).Inc();
        var build = string.IsNullOrWhiteSpace(buildString) ? null : Build.CreateBuildFromString(buildString, Localizer);
        using (MetricsService.ShipViewModelInitDuration.NewTimer())
        {
            var shipSummary = AppData.ShipSummaryList!.Single(x => x.Index.Equals(shipIndex));
            await AppDataService.LoadNationFiles(shipSummary.Nation);
            var ship = await AppDataService.GetShipFromSummary(shipSummary);
            var vmParams = new MainViewModelParams(ship!, shipSummary, build);
            ViewModel = new(null!, AppDataService, Localizer, AppSettings, vmParams);
            await ViewModel.InitializeData(vmParams);
        }
    }
    
    private void ReturnBuild()
    {
        if (string.IsNullOrWhiteSpace(buildName))
        {
            Snackbar.Add("Missing build name", Severity.Error);
            return;
        }
        
        BuildVmCollection vmCollection = new(buildName, ShipIndex, shipModuleVm!, consumableVm!, captainVm!, upgradesVm!, signalVm!);
        MudDialog.Close(DialogResult.Ok(vmCollection));
    }
    
    private void RemoveBuild()
    {
        if (ShipComparisonVm.ContainsBuild(ShipIndex))
        {
            MudDialog.Close(DialogResult.Ok("Removed"));
        }
        else
        {
            MudDialog.Close(DialogResult.Ok("NoBuild"));   
        }
    }

    private async Task ImportBuild(string shipIndex)
    {
        try
        {
            await LoadShipViewModel(shipIndex);
            Snackbar.Add("Build successfully imported", Severity.Success);
        }
        catch (FormatException)
        {
            Snackbar.Add("Failed to import build", Severity.Error);
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private string SetWrapping()
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return "flex-wrap: wrap";
            default:
                return "flex-wrap: nowrap";
        }
    }
    
    private string SetMaxWidth()
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return "max-width: 100%";
            default:
                return "max-width: 55%";
        }
    }
}