@using WoWsShipBuilder.Core.Settings
@using WoWsShipBuilder.Web.Services
@using WoWsShipBuilder.Core.BuildCreator
@using WoWsShipBuilder.Core.Data
@using WoWsShipBuilder.Core.DataProvider
@using Prometheus
@using WoWsShipBuilder.Core.ConverterHelpers
@using WoWsShipBuilder.Core.Services
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.ViewModels.Helper
@using WoWsShipBuilder.ViewModels.Other
@using DynamicData
@using MudBlazor.Services
@using WoWsShipBuilder.Core.DataContainers
@inherits ReactiveComponentBase<ShipViewModel>
@inject ILocalizer Localizer
@inject IAppDataService AppDataService
@inject AppSettings AppSettings
@inject IMetricsService MetricsService
@inject IHostEnvironment Environment
@inject ISnackbar Snackbar
@inject IBreakpointService BreakpointService

@if (ViewModel is not null)
{
    <MudDialog Style="overflow-y: auto; max-height: 100vh">
        <TitleContent>
            <MudItem Class="d-flex align-center" Style="justify-content: center">
                <MudStack AlignItems="AlignItems.End" Row="true" Justify="Justify.SpaceEvenly" Class="mt-1 mb-n1">
                    <MudImage Src="@($"{ImagesBaseAddress}{selectedBuild.ShipWrapper.Ship.Index}.png")" Height="45"/>
                    <MudText Style="font-size: x-large">
                        @Localizer.GetGameLocalization(selectedBuild.ShipWrapper.Ship.Index).Localization
                    </MudText>
                    <MudText Style="font-size: x-large">
                        @selectedBuild.ShipWrapper.Ship.Tier
                    </MudText>
                    <MudIcon Icon="@GetIconFromClass(selectedBuild.ShipWrapper.Ship.ShipClass, selectedBuild.ShipWrapper.Ship.ShipCategory)" Size="Size.Large" ViewBox="-1 0 24 10"/>
                    <MudImage Src="@GetNationFlag(selectedBuild.ShipWrapper.Ship.ShipNation, selectedBuild.ShipWrapper.Ship.Index)" Height="45"/>
                </MudStack>
            </MudItem>
        </TitleContent>
        <DialogContent>
            <MudStack Row="true" Style="@SetWrapping()">
                <MudPaper Style="max-width: 250px; min-width: 250px; overflow:auto" Outlined="true">
                    <MudList Clickable="true" SelectedValueChanged="SelectShip" SelectedValue="selectedBuild">
                        <MudVirtualize IsEnabled="true" Items="@buildList.OrderBy(x => $"{Localizer.GetGameLocalization(x.ShipWrapper.Ship.Index).Localization} : {(string.IsNullOrEmpty(x.BuildName) ? ShipComparisonVm.DefaultBuildName : x.BuildName)}").ToList()" Context="buildWrapper">
                            <MudListItem Style="text-align: center" Value="buildWrapper">
                                <MudText Color="Color.Secondary">
                                    @($"{Localizer.GetGameLocalization(buildWrapper.ShipWrapper.Ship.Index).Localization} : {(string.IsNullOrEmpty(buildWrapper.BuildName) ? ShipComparisonVm.DefaultBuildName : buildWrapper.BuildName)}")
                                </MudText>
                            </MudListItem>
                        </MudVirtualize>
                    </MudList>
                </MudPaper>
                <MudStack>
                    <div class="mt-0 mb-auto">
                        <ShipModulesSelector ViewModel="@ViewModel.ShipModuleViewModel"/>
                    </div>
                    <div class="mt-0 mb-0">
                        <ShipUpgradeSelector ViewModel="@ViewModel.UpgradePanelViewModel"/>
                    </div>
                    <div class="mt-0" style="margin-bottom: -2px">
                        <ConsumableSelector ViewModel="@ViewModel.ConsumableViewModel"/>
                    </div>
                    <MudStack Row="true" Class="mt-n1 mb-0">
                        <MudTextField @bind-Value="buildString" Clearable="true" FullWidth="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Edit" Label="Alternative" Placeholder="Paste build string" Variant="Variant.Outlined"/>
                        <MudButton Disabled="@string.IsNullOrWhiteSpace(buildString)" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Small" Style="margin-top: 6px" OnClick="() => ImportBuild(selectedBuild.ShipWrapper.Ship)">
                            Import
                        </MudButton>
                    </MudStack>
                </MudStack>
                <div style="@SetMaxWidth()">
                    <MudStack>
                        <CaptainSkillSelector ViewModel="@ViewModel.CaptainSkillSelectorViewModel" ShipClass="@ViewModel!.CurrentShip.ShipClass"/>
                        <SignalSelector ViewModel="@ViewModel.SignalSelectorViewModel"/>
                        <MudTextField @bind-Value="buildName" Clearable="true" FullWidth="true" Adornment="Adornment.Start" AdornmentIcon="@Icons.Filled.Edit" Label="Build Name" Placeholder="Enter build name" Variant="Variant.Outlined" Class="mt-auto mb-0"/>
                    </MudStack>
                </div>
            </MudStack>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Primary">
                @Localizer.GetAppLocalization(nameof(Translation.Cancel)).Localization
            </MudButton>
            <MudButton Color="Color.Warning" OnClick="ResetBuild" Variant="Variant.Filled">
                <MudText Typo="Typo.button">
                    Reset build
                </MudText>
            </MudButton>
            <MudButton Color="Color.Error" OnClick="RemoveBuild" Variant="Variant.Filled">
                <MudText Typo="Typo.button">
                    Delete build
                </MudText>
            </MudButton>
            <MudButton Color="Color.Info" OnClick="AddBuild" Variant="Variant.Filled">
                <MudText Typo="Typo.button">
                    Add as new build
                </MudText>
            </MudButton>
            <MudButton Color="Color.Success" OnClick="SaveBuilds" Variant="Variant.Filled">
                <MudText Typo="Typo.button">
                    Confirm changes
                </MudText>
            </MudButton>
        </DialogActions>
    </MudDialog>
}


@code {
    
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public List<ShipComparisonDataWrapper> ShipList { get; set; } = new();
    [Parameter]
    public ShipComparisonViewModel ShipComparisonVm { get; set; } = default!;
    [Parameter]
    public string ImagesBaseAddress { get; set; } = default!;
    
    private Breakpoint Breakpoint { get; set; }

    private List<BuildDataWrapper> buildList = new();
    private BuildDataWrapper selectedBuild = default!;

    private string buildName = string.Empty;
    private string buildString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        
        Breakpoint = await BreakpointService.GetBreakpoint();

        buildList = ShipList.Select(x => new BuildDataWrapper(x, x.Build?.BuildName ?? buildName.Trim())).ToList();
        selectedBuild = buildList.First();
        await LoadVms();
    }

    private async Task LoadVms()
    {
        if (selectedBuild.Cache is not null)
        {
            ViewModel = selectedBuild.Cache;
            return;
        }
        
        await LoadShipViewModel(selectedBuild.ShipWrapper.Ship, selectedBuild.ShipWrapper.Build);
        buildName = selectedBuild.ShipWrapper.Build?.BuildName ?? string.Empty;
    }

    private async Task LoadShipViewModel(Ship ship, Build? build)
    {
        MetricsService.ShipCount.WithLabels(ship.Index).Inc();
        using (MetricsService.ShipViewModelInitDuration.NewTimer())
        {
            var shipSummary = AppData.ShipSummaryList!.Single(x => x.Index.Equals(ship.Index));
            var vmParams = new MainViewModelParams(ship, shipSummary, build);
            ViewModel = new(null!, AppDataService, Localizer, AppSettings, vmParams);
            await ViewModel.InitializeData(vmParams);
        }
    }

    private async Task SaveBuilds()
    {
        buildList.Replace(selectedBuild, new(selectedBuild.ShipWrapper, buildName.Trim(), ViewModel));

        List<ShipComparisonDataWrapper> result = new();
        foreach (var buildWrapper in buildList)
        {
            if (buildWrapper.Cache is not null)
            {
                Build build = new(buildWrapper.BuildName)
                {
                    Captain = buildWrapper.Cache.CaptainSkillSelectorViewModel!.GetCaptainIndex(),
                    Consumables = buildWrapper.Cache.ConsumableViewModel.SaveBuild(),
                    Modules = buildWrapper.Cache.ShipModuleViewModel.SaveBuild(),
                    Nation = buildWrapper.ShipWrapper.Ship.ShipNation,
                    Signals = buildWrapper.Cache.SignalSelectorViewModel!.GetFlagList(),
                    Skills = buildWrapper.Cache.CaptainSkillSelectorViewModel.GetSkillNumberList(),
                    Upgrades = buildWrapper.Cache.UpgradePanelViewModel.SaveBuild(),
                    ShipIndex = buildWrapper.ShipWrapper.Ship.Index,
                    BuildVersion = 2,
                };

                if (build.Modules.Count == 0 && build.Signals.Count == 0 && build.Skills.Count == 0 && build.Upgrades.Count == 0)
                {
                    result.Add(new(buildWrapper.ShipWrapper.Ship, buildWrapper.ShipWrapper.ShipDataContainer, null, buildWrapper.ShipWrapper.Id));
                }
                else
                {
                    var modifiers = new List<(string, float)>();
                    modifiers.AddRange(buildWrapper.Cache.UpgradePanelViewModel.GetModifierList());
                    modifiers.AddRange(buildWrapper.Cache.SignalSelectorViewModel!.GetModifierList());
                    modifiers.AddRange(buildWrapper.Cache.CaptainSkillSelectorViewModel!.GetModifiersList());
                    modifiers.AddRange(buildWrapper.Cache.ConsumableViewModel.GetModifiersList());
                
                    var shipDataContainer = await ShipDataContainer.FromShipAsync(buildWrapper.ShipWrapper.Ship, buildWrapper.Cache.ShipModuleViewModel.SelectedModules.ToList(), modifiers, AppDataService);

                    result.Add(new(buildWrapper.ShipWrapper.Ship, shipDataContainer, build, buildWrapper.ShipWrapper.Id));
                }
            }
            else
            {
                result.Add(buildWrapper.ShipWrapper);
            }
        }

        MudDialog.Close(DialogResult.Ok(result));
    }

    private async Task AddBuild()
    {
        string oldBuildName = selectedBuild.BuildName;
        BuildDataWrapper newBuild = new(new(selectedBuild.ShipWrapper.Ship, selectedBuild.ShipWrapper.ShipDataContainer, selectedBuild.ShipWrapper.Build), buildName.Trim(), ViewModel);
        buildList.Add(newBuild);
        buildName = oldBuildName;
        await SelectShip(newBuild);
        Snackbar.Add($"New build < {newBuild.BuildName} > added for the ship < {Localizer.GetGameLocalization(newBuild.ShipWrapper.Ship.Index).Localization} >", Severity.Success);
    }

    private async Task RemoveBuild()
    {
        int index = buildList.IndexOf(selectedBuild);
        buildList.RemoveAt(index);
        if (buildList.Count > 0)
        {
            selectedBuild = buildList[index == buildList.Count ? index - 1 : index];
            buildName = selectedBuild.BuildName;
            await LoadVms();
        }
        else
        {
            Cancel();
        }
    }
    
    private async Task ResetBuild()
    {
        BuildDataWrapper resetBuild = new(new(selectedBuild.ShipWrapper.Ship, await ShipComparisonVm.GetShipConfiguration(selectedBuild.ShipWrapper.Ship), null, selectedBuild.ShipWrapper.Id), string.Empty);
        buildList.Replace(selectedBuild, resetBuild);
        selectedBuild = resetBuild;
        await LoadVms();
    }

    private async Task ImportBuild(Ship ship)
    {
        try
        {
            await LoadShipViewModel(ship, Build.CreateBuildFromString(buildString, Localizer));
            Snackbar.Add("Build successfully imported", Severity.Success);
        }
        catch (FormatException)
        {
            Snackbar.Add("Failed to import build", Severity.Error);
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private string SetWrapping()
    {
        switch (Breakpoint)
         {
             case Breakpoint.Xs:
             case Breakpoint.Sm:
                 return "flex-wrap: wrap";
             default:
                 return "flex-wrap: nowrap";
         }
    }
    
    private string SetMaxWidth()
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return "max-width: 100%";
            default:
                return "max-width: 55%";
        }
    }
    
    private string GetNationFlag(Nation shipNation, string shipIndex)
    {
        string imgName = File.Exists(Path.Combine(Environment.ContentRootPath, "wwwroot", "assets", "nation_flags", $"flag_{shipIndex}.png")) ? shipIndex : shipNation.ToString();
        return $"/assets/nation_flags/flag_{imgName}.png";
    }
    
    private static string GetIconFromClass(ShipClass shipClass, ShipCategory category)
    {
        string path = ClassToPathHelper.GetSvgPathFromClass(shipClass);
        string stroke = ClassToPathHelper.GetColorFromCategory(category, true)[3..];
        string fill = ClassToPathHelper.GetColorFromCategory(category, false)[3..];
        return $"<path fill=\"#{fill}\" stroke=\"#{stroke}\" stroke-width=\"1\"  d=\"{path}\" />";
    }
    
    private async Task SelectShip(object? obj)
    {
        if (obj is not BuildDataWrapper buildWrapper || buildWrapper.Id.Equals(selectedBuild.Id)) return;
        
        buildList.Replace(selectedBuild, new(selectedBuild.ShipWrapper, buildName.Trim(), ViewModel));

        selectedBuild = buildWrapper;

        buildName = buildWrapper.BuildName;
        
        await LoadVms();
    }

    private sealed record BuildDataWrapper(ShipComparisonDataWrapper ShipWrapper, string BuildName, ShipViewModel? Cache = null)
    {
        public Guid Id { get; } = Guid.NewGuid();
    }
}