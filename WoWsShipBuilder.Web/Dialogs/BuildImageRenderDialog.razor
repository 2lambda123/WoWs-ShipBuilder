@using Microsoft.Extensions.Options
@using WoWsShipBuilder.Core.Data
@using WoWsShipBuilder.Core.Extensions
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.ViewModels.Other
@using WoWsShipBuilder.Web.Data
@using WoWsShipBuilder.Web.Utility

@inherits ReactiveComponentBase<ShipBuildViewModel>

@implements IAsyncDisposable

@inject IOptions<CdnOptions> CdnOptions
@inject IHostEnvironment Environment
@inject ILocalizer Localizer
@inject IJSRuntime Runtime
@inject IDialogService DialogService

<MudDialog Style="@GetMudDialogStyle()">
    <DialogContent>
        <MudBreakpointProvider>
            <div id="image" class="pa-2">
                <MudStack Spacing="2">
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudImage Height="89" ObjectFit="ObjectFit.ScaleDown" Src="@($"{CdnOptions.Value.Host}{CdnOptions.Value.ShipImagePath}/{ShipBuildContainer.Ship.Index}.png")" Style="@GetBackgroundFlag(ShipBuildContainer.Ship.ShipNation, ShipBuildContainer.Ship.Index)"/>
                        <MudStack Class="align-center">
                            <MudStack Row Class="align-center">
                                <MudIcon Icon="@Helpers.GetIconFromClass(ShipBuildContainer.Ship.ShipClass, ShipBuildContainer.Ship.ShipCategory)" Size="Size.Medium" ViewBox="-1 0 24 10" Style="alignment-baseline: center"/>
                                <MudText Typo="Typo.body2" Style="font-size: large" Align="Align.Center">
                                    @ShipBuildContainer.Ship.Tier.ToTierString()
                                </MudText>
                                <MudText Typo="Typo.body2" Style="font-size: x-large">
                                    @Localizer.GetGameLocalization(ShipBuildContainer.Ship.Index + "_FULL").Localization
                                </MudText>
                            </MudStack>
                            <MudText Typo="Typo.body2" Style="font-size: medium">
                                @Localizer.GetAppLocalization(Translation.ChartsWeb_Build).Localization: @(!string.IsNullOrEmpty(ShipBuildContainer.Build?.BuildName) ? ShipBuildContainer.Build.BuildName : ShipComparisonViewModel.DefaultBuildName)
                            </MudText>
                        </MudStack>
                        <MudStack Row Spacing="0">
                            <MudHidden Breakpoint="Breakpoint.Always" Invert>
                                <div style="width: 62px"></div>
                            </MudHidden>
                            <MudImage Height="89" ObjectFit="ObjectFit.ScaleDown" Src="@("/assets/ship-builder.svg")"/>
                        </MudStack>
                    </MudStack>
                    @if (ViewModel is not null)
                    {
                        if (showModules)
                        {
                            <ShipModulesSelector ViewModel="@ViewModel.ShipModuleViewModel" IsBuildImage/>
                        }
                        if (twoColumns)
                        {
                            <MudStack Row Spacing="2">
                                <MudStack Spacing="2" Style="width: 50%">
                                    @if (showCaptainSkills)
                                    {
                                        <CaptainSkillSelector ViewModel="@ViewModel.CaptainSkillSelectorViewModel" ShipClass="@ViewModel!.CurrentShip.ShipClass" IsBuildImage/>
                                    }
                                    @if (showUpgrades)
                                    {
                                        <ShipUpgradeSelector ViewModel="@ViewModel.UpgradePanelViewModel" IsBuildImage/>
                                    }
                                </MudStack>
                                <MudStack Spacing="2" Style="width: 50%">
                                    @if (showSignals)
                                    {
                                        <div style="@((showConsumables ? "height: 83.13%;" : "height: 100%;") + "display: flex")">
                                            <SignalSelector ViewModel="@ViewModel.SignalSelectorViewModel" IsBuildImage/>
                                        </div>
                                    }
                                    @if (showConsumables)
                                    {
                                        <div style="height: 16.87%; display: flex">
                                            <ConsumableSelector ViewModel="@ViewModel.ConsumableViewModel" IsBuildImage/>
                                        </div>
                                    }
                                </MudStack>
                            </MudStack>
                        }
                        else
                        {
                            if (showCaptainSkills)
                            {
                                <CaptainSkillSelector ViewModel="@ViewModel.CaptainSkillSelectorViewModel" ShipClass="@ViewModel!.CurrentShip.ShipClass" IsBuildImage/>
                            }
                            if (showUpgrades)
                            {
                                <ShipUpgradeSelector ViewModel="@ViewModel.UpgradePanelViewModel" IsBuildImage/>
                            }
                            if (showConsumables)
                            {
                                <ConsumableSelector ViewModel="@ViewModel.ConsumableViewModel" IsBuildImage/>
                            }
                            if (showSignals)
                            {
                                <SignalSelector ViewModel="@ViewModel.SignalSelectorViewModel" IsBuildImage/>
                            }
                        }
                    }
                </MudStack>
            </div>
        </MudBreakpointProvider>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="OpenSettingsDialog" Variant="Variant.Filled" Color="Color.Warning">
            Settings
        </MudButton>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Primary">
            @Localizer.GetAppLocalization(nameof(Translation.Cancel)).Localization
        </MudButton>
        <MudButton Color="Color.Success" OnClick="SaveImage" Variant="Variant.Filled">
            <MudText Typo="Typo.button">
                Save
            </MudText>
        </MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter, EditorRequired]
    public ShipBuildContainer ShipBuildContainer { get; set; } = default!;

    private bool showModules;
    private bool showCaptainSkills = true;
    private bool showUpgrades = true;
    private bool showConsumables = true;
    private bool showSignals = true;

    private bool twoColumns = true;

    private IJSObjectReference? module;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();

        ViewModel = ShipBuildViewModel.Create(ShipBuildContainer);
    }

    private string GetBackgroundFlag(Nation shipNation, string shipIndex)
    {
    // "'background-image: url("/assets/nation_flags/flag_" + ViewModel.CurrentShip.Nation + ".png\")
        string imgName = shipIndex;
        if (!File.Exists(Path.Combine(Environment.ContentRootPath, "wwwroot", "assets", "nation_flags", $"flag_{shipIndex}.png")))
        {
            imgName = shipNation.ToString();
        }
        return $"background-image: url(\"/assets/nation_flags/flag_{imgName}.png\"); background-size: cover";
    }
    
    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task SaveImage()
    {
        module ??= await Runtime.InvokeAsync<IJSObjectReference>("import", "/Dialogs/BuildImageRenderDialog.razor.js");
        await module.InvokeVoidAsync("downloadBuildImage", "image", $"{Localizer.GetGameLocalization(ShipBuildContainer.Ship.Index + "_FULL").Localization}_{(!string.IsNullOrEmpty(ShipBuildContainer.Build?.BuildName) ? ShipBuildContainer.Build.BuildName : ShipComparisonViewModel.DefaultBuildName)}");
    }

    private string GetMudDialogStyle()
    {
        return "max-height: 100vh; width: " + (twoColumns ? "1000px;" : "600px;");
    }

    private async Task OpenSettingsDialog()
    {
        DialogOptions options = new()
        {
            NoHeader = true,
        };
        var parameters = new DialogParameters
        {
            ["ShowModules"] = showModules,
            ["ShowCaptainSkills"] = showCaptainSkills,
            ["ShowUpgrades"] = showUpgrades,
            ["ShowConsumables"] = showConsumables,
            ["ShowSignals"] = showSignals,
            ["TwoColumns"] = twoColumns,
        };
        var dialog = await DialogService.ShowAsync<BuildImageSettingsDialog>(string.Empty, parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is bool[] shareResult)
        {
            showModules = shareResult[0];
            showCaptainSkills = shareResult[1];
            showUpgrades = shareResult[2];
            showConsumables = shareResult[3];
            showSignals = shareResult[4];
            twoColumns = shareResult[5];
        }
        StateHasChanged();
    }

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}
