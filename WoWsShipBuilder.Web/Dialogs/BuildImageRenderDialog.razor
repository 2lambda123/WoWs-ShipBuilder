@using Microsoft.Extensions.Options
@using WoWsShipBuilder.Core.Extensions
@using WoWsShipBuilder.Core.Settings
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.ViewModels.Other
@using WoWsShipBuilder.ViewModels.ShipVm
@using WoWsShipBuilder.Web.Data
@using WoWsShipBuilder.Web.Utility

@implements IAsyncDisposable

@inject IOptions<CdnOptions> CdnOptions
@inject IHostEnvironment Environment
@inject ILocalizer Localizer
@inject IJSRuntime Runtime
@inject IDialogService DialogService
@inject AppSettings AppSettings

<MudDialog Style="@GetDialogSize()">
    <DialogContent>
        <MudBreakpointProvider>
            <div id="image" class="pa-2" style="@GetImageWidth()">
                <MudStack Spacing="2">
                    <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween">
                        <MudImage Height="89" ObjectFit="ObjectFit.ScaleDown" Src="@($"{CdnOptions.Value.Host}{CdnOptions.Value.ShipImagePath}/{Ship.Index}.png")" Style="@GetBackgroundFlag(Ship.Nation, Ship.Index)"/>
                        <MudStack Class="align-center">
                            <MudStack Row Class="align-center">
                                <MudIcon Icon="@Helpers.GetIconFromClass(Ship.ShipClass, Ship.Category)" Size="Size.Medium" ViewBox="-1 0 24 10" Style="alignment: bottom"/>
                                <MudText Typo="Typo.body2" Style="font-size: large; alignment: bottom;" Align="Align.Center">
                                    @Ship.Tier.ToTierString()
                                </MudText>
                                <MudText Typo="Typo.body2" Style="font-size: x-large">
                                    @Localizer.GetGameLocalization(Ship.Index + "_FULL").Localization
                                </MudText>
                            </MudStack>
                            <MudStack Row AlignItems="AlignItems.Baseline">
                                <MudText Style="text-overflow: ellipsis; overflow: hidden; font-size: medium; cursor: pointer;" Typo="Typo.body2" Class="ml-2 mt-n1" @onclick="@(_ => EditBuildName())">
                                    @Localizer.GetAppLocalization(Translation.ChartsWeb_Build).Localization: @(!string.IsNullOrEmpty(BuildName) ? BuildName : ShipComparisonViewModel.DefaultBuildName)
                                </MudText>
                                <MudIcon id="editBuildNameIcon" Size="Size.Small" Icon="@Icons.Material.Filled.Edit" @onclick="@(_ => EditBuildName())" Style="cursor: pointer; alignment-baseline: hanging; font-size: small" ViewBox="0 -3 24 24"/>
                            </MudStack>
                        </MudStack>
                        <MudStack Row Spacing="0">
                            <MudHidden Breakpoint="Breakpoint.Always" Invert>
                                <div style="width: 62px"></div>
                            </MudHidden>
                            <MudImage Height="89" ObjectFit="ObjectFit.ScaleDown" Src="@("/assets/ship-builder.svg")"/>
                        </MudStack>
                    </MudStack>
                    @if (showModules)
                    {
                        <ShipModulesSelector ViewModel="@ShipModuleViewModel" IsBuildImage/>
                    }
                    @if (twoColumns)
                    {
                        <MudStack Row Spacing="2">
                            <MudStack Spacing="2" Style="width: 50%">
                                @if (showCaptainSkills)
                                {
                                    <CaptainSkillSelector ViewModel="@CaptainSkillSelectorViewModel" ShipClass="@Ship.ShipClass" IsBuildImage/>
                                }
                                @if (showUpgrades)
                                {
                                    <ShipUpgradeSelector ViewModel="@UpgradePanelViewModel" IsBuildImage/>
                                }
                            </MudStack>
                            <MudStack Spacing="2" Style="width: 50%">
                                @if (showSignals)
                                {
                                    <div style="@((showConsumables ? "height: 83.13%;" : "height: 100%;") + "display: flex")">
                                        <SignalSelector ViewModel="@SignalSelectorViewModel" IsBuildImage/>
                                    </div>
                                }
                                @if (showConsumables)
                                {
                                    <div style="height: 16.87%; display: flex">
                                        <ConsumableSelector ViewModel="@ConsumableViewModel" IsBuildImage/>
                                    </div>
                                }
                            </MudStack>
                        </MudStack>
                    }
                    else
                    {
                        if (showCaptainSkills)
                        {
                            <CaptainSkillSelector ViewModel="@CaptainSkillSelectorViewModel" ShipClass="@Ship.ShipClass" IsBuildImage/>
                        }
                        if (showUpgrades)
                        {
                            <ShipUpgradeSelector ViewModel="@UpgradePanelViewModel" IsBuildImage/>
                        }
                        if (showConsumables)
                        {
                            <ConsumableSelector ViewModel="@ConsumableViewModel" IsBuildImage/>
                        }
                        if (showSignals)
                        {
                            <SignalSelector ViewModel="@SignalSelectorViewModel" IsBuildImage/>
                        }
                    }
                </MudStack>
            </div>
        </MudBreakpointProvider>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Color="Color.Error">
            @Localizer.GetAppLocalization(nameof(Translation.Cancel)).Localization
        </MudButton>
        <MudButton OnClick="@OnConfirm" Color="Color.Info">
            Get Url
        </MudButton>
        @if (!ShortLinkDisabled)
        {
            <MudButton OnClick="@OnConfirmShortLink" Disabled="@string.IsNullOrWhiteSpace(BuildName)" Color="Color.Info">
                Get Short-Link
            </MudButton>
        }
        <MudButton OnClick="@OpenSettingsDialog" Color="Color.Warning">
            Settings
        </MudButton>
        <MudButton Color="Color.Success" OnClick="@SaveImage">
            Save Imange
        </MudButton>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();
    
    [Parameter, EditorRequired]
    public ShipSummary Ship { get; set; } = default!;
    [Parameter, EditorRequired]
    public string BuildName { get; set; } = default!;
    [Parameter, EditorRequired]
    public string BuildString { get; set; } = default!;
    [Parameter, EditorRequired]
    public ShipModuleViewModel ShipModuleViewModel { get; set; } = default!;
    [Parameter, EditorRequired]
    public CaptainSkillSelectorViewModel CaptainSkillSelectorViewModel { get; set; } = default!;
    [Parameter, EditorRequired]
    public UpgradePanelViewModelBase UpgradePanelViewModel { get; set; } = default!;
    [Parameter, EditorRequired]
    public ConsumableViewModel ConsumableViewModel { get; set; } = default!;
    [Parameter, EditorRequired]
    public SignalSelectorViewModel SignalSelectorViewModel { get; set; } = default!;

    [Parameter]
    public Breakpoint Breakpoint { get; set; }
    [Parameter]
    public bool ShortLinkDisabled { get; set; }
    
    private IJSObjectReference? module;
    
    private bool twoColumns = true;
    private bool showModules;
    private bool showCaptainSkills = true;
    private bool showUpgrades = true;
    private bool showConsumables = true;
    private bool showSignals = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        CheckScreenSize();
        LoadAppSettings();
    }

    private string GetBackgroundFlag(Nation shipNation, string shipIndex)
    {
        string imgName = shipIndex;
        if (!File.Exists(Path.Combine(Environment.ContentRootPath, "wwwroot", "assets", "nation_flags", $"flag_{shipIndex}.png")))
        {
            imgName = shipNation.ToString();
        }
        return $"background-image: url(\"/assets/nation_flags/flag_{imgName}.png\"); background-size: cover";
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task EditBuildName()
    {
        DialogOptions options = new()
        {
            NoHeader = true,
        };
        DialogParameters parameters = new()
        {
            ["BuildName"] = BuildName,
        };
        var result = await (await DialogService.ShowAsync<BuildNameDialog>(string.Empty, parameters, options)).Result;
        if (!result.Canceled && result.Data is string buildName)
        {
            BuildName = buildName;
        }
    }
    
    private async Task SaveImage()
    {
        if (string.IsNullOrWhiteSpace(BuildName))
        {
            await EditBuildName();
        }
        
        StateHasChanged();
        
        if (!string.IsNullOrWhiteSpace(BuildName))
        {
            module ??= await Runtime.InvokeAsync<IJSObjectReference>("import", "/Dialogs/BuildImageRenderDialog.razor.js");
            await module.InvokeVoidAsync("downloadBuildImage", "image", $"{Localizer.GetGameLocalization(Ship.Index + "_FULL").Localization}_{BuildName}", BuildString[..(BuildString.LastIndexOf(';') + 1)] + BuildName);
            MudDialog.Close(BuildName);
        }
    }
    
    private async Task OnConfirm()
    {
        if (string.IsNullOrWhiteSpace(BuildName))
        {
            await EditBuildName();
        }
        
        if (!string.IsNullOrWhiteSpace(BuildName))
        {
            MudDialog.Close(new BuildShareResult(BuildName));   
        }
    }

    private async Task OnConfirmShortLink()
    {
        if (string.IsNullOrWhiteSpace(BuildName))
        {
            await EditBuildName();
        }
        
        if (!string.IsNullOrWhiteSpace(BuildName))
        {
            MudDialog.Close(new BuildShareResult(BuildName, true));
        }
    }
    
    private void CheckScreenSize()
    {
        if (Breakpoint is Breakpoint.Xs or Breakpoint.Sm)
        {
            twoColumns = false; 
        }
    }

    private string GetImageWidth()
    {
        if (Breakpoint is Breakpoint.Xs or Breakpoint.Sm)
        {
            return string.Empty;
        }
        return "width: " + (twoColumns ? "944px;" : "544px;");
    }
    
    private string GetDialogSize()
    {
        return "max-height: 100vh; max-width: " + (twoColumns ? "1000px;" : "600px;");
    }

    private async Task OpenSettingsDialog()
    {
        DialogOptions options = new()
        {
            NoHeader = true,
        };
        var parameters = new DialogParameters
        {
            ["ShowModules"] = showModules,
            ["ShowCaptainSkills"] = showCaptainSkills,
            ["ShowUpgrades"] = showUpgrades,
            ["ShowConsumables"] = showConsumables,
            ["ShowSignals"] = showSignals,
            ["TwoColumns"] = twoColumns,
            ["Breakpoint"] = Breakpoint,
        };
        var dialogResult = await (await DialogService.ShowAsync<BuildImageSettingsDialog>(string.Empty, parameters, options)).Result;
        if (!dialogResult.Canceled && dialogResult.Data is bool[] result)
        {
            showModules = result[0];
            showCaptainSkills = result[1];
            showUpgrades = result[2];
            showConsumables = result[3];
            showSignals = result[4];
            twoColumns = result[5];
            
            UpdateAppSettings();
        }
    }
    
    private void UpdateAppSettings()
    {
        if (AppSettings.WebAppSettings is not null)
        {
            AppSettings.WebAppSettings.BuildImageLayoutSettings[0] = twoColumns;
            AppSettings.WebAppSettings.BuildImageLayoutSettings[1] = showModules;
            AppSettings.WebAppSettings.BuildImageLayoutSettings[2] = showCaptainSkills;
            AppSettings.WebAppSettings.BuildImageLayoutSettings[3] = showUpgrades;
            AppSettings.WebAppSettings.BuildImageLayoutSettings[4] = showConsumables;
            AppSettings.WebAppSettings.BuildImageLayoutSettings[5] = showSignals;
        }
    }
    
    private void LoadAppSettings()
    {
        if (AppSettings.WebAppSettings is not null)
        {
            twoColumns = AppSettings.WebAppSettings.BuildImageLayoutSettings[0];
            showModules = AppSettings.WebAppSettings.BuildImageLayoutSettings[1];
            showCaptainSkills = AppSettings.WebAppSettings.BuildImageLayoutSettings[2];
            showUpgrades = AppSettings.WebAppSettings.BuildImageLayoutSettings[3];
            showConsumables = AppSettings.WebAppSettings.BuildImageLayoutSettings[4];
            showSignals = AppSettings.WebAppSettings.BuildImageLayoutSettings[5];
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
            }
        }
    }
}
