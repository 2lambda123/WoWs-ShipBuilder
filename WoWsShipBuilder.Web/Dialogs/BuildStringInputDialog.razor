@using WoWsShipBuilder.Core.Builds
@using System.Net
@using System.Net.Http.Headers
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.Extensions.Options
@using WoWsShipBuilder.Web.LinkShortening
@inject ILocalizer Localizer
@inject IOptions<LinkShorteningOptions> LinkShorteningOptions

<MudDialog Style="width: 600px">
    <DialogContent>
        <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
            <MudTextField @bind-Value="inputBuild" Label="@Localizer.GetAppLocalization(nameof(Translation.BuildStringInputDialog_EnterBuildStringOrLink)).Localization" Immediate Validation="@(new Func<string, string?>(ValidateBuildString))"/>
        </MudFocusTrap>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="@Cancel">
            @Localizer.GetAppLocalization(nameof(Translation.Dialog_Cancel)).Localization
        </MudButton>
        <MudButton OnClick="@OnConfirm" Disabled="@(string.IsNullOrWhiteSpace(buildString))">
            @Localizer.SimpleAppLocalization(nameof(Translation.ShipSelectionWindow_ConfirmButton))
        </MudButton>
    </DialogActions>
</MudDialog>

@code {

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public string SelectedShipIndex { get; set; } = default!;
    
    private string inputBuild = string.Empty;

    private string buildString = string.Empty;

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private void OnConfirm()
    {
        MudDialog.Close(buildString.Trim());
    }

    private string? ValidateBuildString(string buildStr)
    {
        buildString = string.Empty;
        if (string.IsNullOrWhiteSpace(buildStr))
        {
            return null;
        }
        
        if (buildStr.Contains(LinkShorteningOptions.Value.UriPrefix))
        {
            // this allows you to set the settings so that we can get the redirect url
            var handler = new HttpClientHandler
            {
                AllowAutoRedirect = false,
            };

            var shortUrl = buildStr;
            using HttpClient client = new(handler);
            // ReSharper disable once AccessToDisposedClosure
            using HttpResponseMessage response = new TaskFactory(CancellationToken.None, TaskCreationOptions.None, TaskContinuationOptions.None, TaskScheduler.Default).StartNew<Task<HttpResponseMessage>>(async () => await client.GetAsync(shortUrl).ConfigureAwait(false)).Unwrap().GetAwaiter().GetResult();
            using HttpContent content = response.Content;

            // Read the response to see if we have the redirected url
            string? redirectedUrl = null;
            if (response.StatusCode == HttpStatusCode.Found)
            {
                HttpResponseHeaders headers = response.Headers;
                if (headers.Location is not null)
                {
                    redirectedUrl = headers.Location.AbsoluteUri;
                }
            }
            
            if (redirectedUrl is not null && QueryHelpers.ParseQuery(redirectedUrl).TryGetValue("build", out var buildStrFromUrl))
            {
                buildStr = buildStrFromUrl.ToString(); 
            }
            else
            {
                return Localizer.SimpleAppLocalization(nameof(Translation.Validation_InvalidBuild));
            }
        }

        if (QueryHelpers.ParseQuery(buildStr).TryGetValue("build", out var buildStringFromUrl))
        {
            buildStr = buildStringFromUrl.ToString();
        }

        if (buildStr.Contains(';'))
        {
            try
            {
                var build = Build.CreateBuildFromString(buildStr);
                if (SelectedShipIndex.Equals(build.ShipIndex))
                {
                    buildString = buildStr;
                    return null;
                }
                
                return $"{Localizer.SimpleAppLocalization(nameof(Translation.Validation_Incompatibility))}. {Localizer.SimpleAppLocalization(nameof(Translation.Validation_SelectedShip))}: {Localizer.GetGameLocalization(SelectedShipIndex + "_FULL").Localization} ≠ {Localizer.SimpleAppLocalization(nameof(Translation.Validation_ShipInBuild))}: {Localizer.GetGameLocalization(build.ShipIndex + "_FULL").Localization}";
            }
            catch (FormatException)
            {
                return Localizer.SimpleAppLocalization(nameof(Translation.Validation_InvalidBuild));
            }
        }

        return Localizer.SimpleAppLocalization(nameof(Translation.Validation_InvalidBuild));
    }
}