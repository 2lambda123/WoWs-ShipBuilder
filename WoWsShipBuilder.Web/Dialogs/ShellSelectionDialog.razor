@using WoWsShipBuilder.Web.Utility
@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Core.Services
@using WoWsShipBuilder.DataStructures.Projectile
@inject ILocalizer Localizer
@inject IAppDataService WebAppDataService

<MudDialog>
    <TitleContent>
        <MudItem Class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.HelpOutline" Color="Color.Info" Size="Size.Large"/>
            <MudText Typo="Typo.h6" Class="mx-auto">
                @Localizer.GetAppLocalization(nameof(Translation.DispersionGraphWindow_SelectShell)).Localization
            </MudText>
        </MudItem>
    </TitleContent>
    <DialogContent>
        <MudContainer Style="max-height: 500px; overflow-y: auto">
            <MudGrid Justify="Justify.Center">
                @foreach (var ship in ShipList)
                {
                    <MudItem xs="12" md="6" Class="d-flex" Style="flex-direction: column">
                        <MudItem Class="d-flex mt-2" Style="justify-content: space-between">
                            <MudText Typo="Typo.caption" Class="my-auto">
                                @Localizer.GetGameLocalization(ship.ShipIndex + "_FULL").Localization
                            </MudText>
                            <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Primary" Size="Size.Small" OnClick="@(() => RemoveShip(ship))"/>
                        </MudItem>
                        @if (ship.ArtilleryDataDictionary.Count > 0)
                        {
                            <MudButtonGroup OverrideStyles="false" VerticalAlign="true" Class="gap-1">
                                @foreach ((string shellIndex, (_,_, bool shellSelected)) in ship.ArtilleryDataDictionary)
                                {
                                    <MudButton Color="GetColorFromBool(shellSelected)" Variant="GetVariantFromBool(shellSelected)" DisableElevation="true" OnClick="@(() => ToggleSelection(ship, shellIndex))">
                                        @Localizer.GetGameLocalization(shellIndex).Localization
                                    </MudButton>
                                }
                            </MudButtonGroup>
                        }
                        else
                        {
                            <MudText Color="Color.Primary">
                                @Localizer.GetAppLocalization(nameof(Translation.MessageBox_ShipNoGun)).Localization
                            </MudText>
                        }
                        <MudDivider Light="true" Class="mt-2"/>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Primary">
            @Localizer.GetAppLocalization(nameof(Translation.Cancel)).Localization
        </MudButton>
        <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
            <MudButton Color="Color.Info" OnClick="ReturnSelectedShells" Variant="Variant.Filled" Disabled="processing">
                @if (processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2" Typo="Typo.button">
                        @Localizer.GetAppLocalization(nameof(Translation.ShipAndShellSelectionDialogWeb_Loading)).Localization
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.button">
                        @Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_ConfirmButton)).Localization
                    </MudText>
                }
            </MudButton>
        </MudFocusTrap>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public List<ChartsRenderingDataWrapper> ShipList { get; set; } = new();
    
    private bool processing;

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task ReturnSelectedShells()
    {
        processing = true;
        List<ChartsRenderingDataWrapper> selections = ShipList.Where(x => x.ArtilleryDataDictionary.Select(y => y.Value.ShellSelected).Contains(true)).ToList();
        List<ChartsRenderingDataWrapper> newData = new();
        foreach ((string shipIndex, Dictionary<string, ArtilleryData> artilleryDataDictionary, _, _) in selections)
        {
            var shipSummary = AppData.ShipSummaryList.First(x => x.Index.Equals(shipIndex));
            var ship = WebAppDataService.GetShipFromSummary(shipSummary);
            double maxRange = -1;
            double sigma = -1;
            IEnumerable<string> shellIndexes = artilleryDataDictionary.Where(x => x.Value.ShellSelected).Select(x => x.Key);
            foreach (string shellIndex in shellIndexes)
            {
                var gun = ship.MainBatteryModuleList.Values.First(x => x.Guns.First().AmmoList.Contains(shellIndex));
                var shell = await WebAppDataService.GetProjectile<ArtilleryShell>(shellIndex);

                var newArtilleryData = artilleryDataDictionary[shellIndex];
                newArtilleryData.Shell = shell;
                newArtilleryData.DispersionValues = gun.DispersionValues;
                maxRange = decimal.ToDouble(gun.MaxRange);
                sigma = decimal.ToDouble(gun.Sigma);
            }
            newData.Add(new(shipIndex, artilleryDataDictionary, maxRange, sigma));
        }
        selections.Clear();
        selections.AddRange(newData);
        processing = false;
        MudDialog.Close(DialogResult.Ok(selections));
    }

    private static Variant GetVariantFromBool(bool active)
    {
        return active ? Variant.Filled : Variant.Outlined;
    }

    private static Color GetColorFromBool(bool active)
    {
        return active ? Color.Primary : Color.Secondary;
    }

    private void ToggleSelection(ChartsRenderingDataWrapper ship, string shellIndex)
    {
        ship.ArtilleryDataDictionary[shellIndex].ShellSelected = !ship.ArtilleryDataDictionary[shellIndex].ShellSelected;
        StateHasChanged();
    }

    private void RemoveShip(ChartsRenderingDataWrapper ship)
    {
        ShipList.Remove(ship);
        StateHasChanged();
    }
}