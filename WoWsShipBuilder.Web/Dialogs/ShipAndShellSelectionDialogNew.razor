@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Web.Utility
@using System.Collections.ObjectModel
@using System.Collections.Specialized
@using DynamicData
@using System.Linq
@using WoWsShipBuilder.Core.Data
@using WoWsShipBuilder.Core.DataContainers
@using WoWsShipBuilder.DataStructures.Projectile
@using WoWsShipBuilder.DataStructures.Ship
@inject ILocalizer Localizer

<MudDialog Style="overflow: auto; max-height: calc(95vh - 100px)">
    <TitleContent>
        <MudItem Class="d-flex align-center">
            <MudIcon Icon="@Icons.Material.Filled.HelpOutline" Color="Color.Info" Size="Size.Large"/>
            <MudText Typo="Typo.h6" Class="mx-auto">
                @Localizer.GetAppLocalization(nameof(Translation.ShipAndShellSelectionDialogWeb_SelectShipsAndShells)).Localization
            </MudText>
        </MudItem>
    </TitleContent>
    <DialogContent>
        <MudContainer Class="d-flex" Style="min-height: 600px; max-height: 600px; overflow-y: auto">
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" md="8" Class="d-flex" Style="overflow-y: auto">
                    <ShipSelector SelectedShips="@selectedShips" LargerList="true"/>
                </MudItem>
                <MudItem xs="12" md="4" Style="min-height: 600px; max-height: 600px; overflow-y: auto">
                    @foreach (var dataWrapper in dataWrappers)
                    {
                        <MudItem Class="d-flex" Style="flex-direction: column">
                            <MudItem Class="d-flex mt-2" Style="justify-content: space-between">
                                <MudText Typo="Typo.caption" Class="my-auto">
                                    @Localizer.GetGameLocalization($"{dataWrapper.ShipContainer.Ship.Index}_FULL").Localization
                                </MudText>
                                <MudIconButton Icon="@Icons.Material.Filled.Clear" Color="Color.Primary" Size="Size.Small" OnClick="@(() => RemoveShip(dataWrapper))"/>
                            </MudItem>
                            @if (dataWrapper.ShipContainer.ShipDataContainer!.MainBatteryDataContainer is not null && dataWrapper.ShipContainer.ShipDataContainer.MainBatteryDataContainer.ShellData.Count > 0)
                            {
                                <MudButtonGroup OverrideStyles="false" VerticalAlign="true" Class="gap-1">
                                    @foreach (var shellData in dataWrapper.ShipContainer.ShipDataContainer.MainBatteryDataContainer.ShellData)
                                    {
                                        <MudButton Color="@(GetColorFromBool(dataWrapper.SelectedShells.Contains(shellData.Name)))" Variant="@(GetVariantFromBool(dataWrapper.SelectedShells.Contains(shellData.Name)))" DisableElevation="true" OnClick="@(() => ToggleSelection(dataWrapper, shellData.Name))">
                                            @Localizer.GetGameLocalization(shellData.Name).Localization
                                        </MudButton>
                                    }
                                </MudButtonGroup>
                            }
                            else
                            {
                                <MudText Color="Color.Primary">
                                    @Localizer.GetAppLocalization(nameof(Translation.MessageBox_ShipNoGun)).Localization
                                </MudText>
                            }
                            <MudDivider Light="true" Class="mt-2"/>
                        </MudItem>
                    }
                </MudItem>
            </MudGrid>
        </MudContainer>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel" Variant="Variant.Filled" Color="Color.Primary">
            @Localizer.GetAppLocalization(nameof(Translation.Cancel)).Localization
        </MudButton>
        <MudFocusTrap DefaultFocus="DefaultFocus.FirstChild">
            <MudButton Color="Color.Info" OnClick="ReturnSelectedShells" Variant="Variant.Filled" Disabled="processing">
                @if (processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                    <MudText Class="ms-2" Typo="Typo.button">
                        @Localizer.GetAppLocalization(nameof(Translation.ShipAndShellSelectionDialogWeb_Loading)).Localization
                    </MudText>
                }
                else
                {
                    <MudText Typo="Typo.button">
                        @Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_ConfirmButton)).Localization
                    </MudText>
                }
            </MudButton>
        </MudFocusTrap>
    </DialogActions>
</MudDialog>

@code
{
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; } = new();

    [Parameter]
    public ShipAndShellSelectionDialogInput InputData { get; set; }


    private readonly List<ChartsDataWrapper> dataWrappers = new();
    private readonly ObservableCollection<string> selectedShips = new();
    private bool processing;
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        dataWrappers.AddRange(InputData.ContainerList);
        selectedShips.AddRange(InputData.ContainerList.Select(x => x.ShipContainer.Ship.Index));
        selectedShips.CollectionChanged += SelectedShipsOnCollectionChanged;
    }

    private void SelectedShipsOnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        if (e.Action.Equals(NotifyCollectionChangedAction.Add))
        {
            //manage newly added items
            var newShips = (e.NewItems as List<string>) ?? new List<string>();
            foreach (string ship in newShips)
            {
                AddWrapper(ship);
            }

            //Removed ships are managed by the RemoveShip method.
            StateHasChanged();
        }
    }

    private void AddWrapper(string shipIndex)
    {
        var shipSummary = AppData.ShipSummaryList.First(x => x.Index.Equals(shipIndex));
        var ship = AppData.FindShipFromSummary(shipSummary);
        
        List<ShipUpgrade> shipConfiguration = ShipModuleHelper.GroupAndSortUpgrades(ship.ShipUpgradeInfo.ShipUpgrades)
            .OrderBy(entry => entry.Key)
            .Select(entry => entry.Value)
            .Select(module => module.First())
            .ToList();
        var dataContainer = ShipDataContainer.CreateFromShip(ship, shipConfiguration , new());
        ShipBuildContainer container = new(ship, null, new Guid(), null, false, dataContainer, null);
        ChartsDataWrapper wrapper = new ChartsDataWrapper(container, new());
        dataWrappers.Add(wrapper);
    }

    private void ReturnSelectedShells()
    {
        processing = true;
        List<ChartsDataWrapper> initialShips = InputData.ContainerList;
        
        List<ChartsDataWrapper> shipsToAdd = new();
        Dictionary<Guid, ChartsDataWrapper> shipsToModify = new();
        List<Guid> shipsToRemove = new();
        
        //newly added ships
        shipsToAdd.AddRange(dataWrappers.Where(current => !initialShips.Select(x => x.ShipContainer.Id).Contains(current.ShipContainer.Id)));
        
        //removed ships
        shipsToRemove.AddRange(initialShips.Where(current => !dataWrappers.Select(x => x.ShipContainer.Id).Contains(current.ShipContainer.Id)).Select(x => x.ShipContainer.Id));
        
        //modified ship
        var commonShips = dataWrappers.Where(current => initialShips.Select(x => x.ShipContainer.Id).Contains(current.ShipContainer.Id));
        foreach (var ship in commonShips)
        {
            
            var initialShip = initialShips.First(x => x.ShipContainer.Id.Equals(ship.ShipContainer.Id));
            //shells list are always sorted, see "ToggleSelection" method
            if (!initialShip.SelectedShells.SequenceEqual(ship.SelectedShells))
            {
                shipsToModify.Add(ship.ShipContainer.Id, ship);
            }
        }

        ShipAndShellSelectionDialogOutput output = new(shipsToAdd, shipsToModify, shipsToRemove);
        processing = false;
        MudDialog.Close(DialogResult.Ok(output));
    }

    private void RemoveShip(ChartsDataWrapper ship)
    {
        dataWrappers.Remove(ship);
        selectedShips.Remove(ship.ShipContainer.Ship.Index);
    }

    private void ToggleSelection(ChartsDataWrapper ship, string shellIndex)
    {
        if (ship.SelectedShells.Contains(shellIndex))
        {
            ship.SelectedShells.Remove(shellIndex);
            ship.SelectedShells.Sort();
        }
        else
        {
            ship.SelectedShells.Add(shellIndex);
            ship.SelectedShells.Sort();
        }
        StateHasChanged();
    }

    private static Variant GetVariantFromBool(bool active)
    {
        return active ? Variant.Filled : Variant.Outlined;
    }

    private static Color GetColorFromBool(bool active)
    {
        return active ? Color.Primary : Color.Secondary;
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }
}