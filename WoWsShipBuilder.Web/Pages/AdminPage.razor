@page "/admin"
@using WoWsShipBuilder.Web.Utility
@using System.Text.Json.Serialization
@inject NavigationManager NavigationManager
@inject HttpClient Client

<MudText Class="ma-2" Align="Align.Center" Typo="Typo.h4">Administration page</MudText>

<div class="d-flex align-center flex-column">
    <MudButton Variant="Variant.Outlined" OnClick="TryWgAuth">Auth with Wg</MudButton>
    @if (authorized)
    {
        <MudStack Class="mt-2">
            <MudText>@($"status: {status}")</MudText>
            <MudText>@($"account_id: {accountId}")</MudText>
            <MudText>@($"access_token: {accessToken}")</MudText>
        </MudStack>
    }
</div>

@code {

    private bool authorized = false;

    private string status = string.Empty;
    
    private string accountId = string.Empty;

    private string accessToken = string.Empty;

    private static readonly List<string> AllowedIds = new() {"534767817", "537376379", "534769513"};

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (NavigationManager.TryGetQueryString("status", out status) && status.Equals("ok"))
        {
            NavigationManager.TryGetQueryString("account_id", out accountId);
            if (AllowedIds.Contains(accountId))
            {
                NavigationManager.TryGetQueryString("access_token", out accessToken);
                authorized = await ValidateAuth();
            }
        }
    }
    
    private void TryWgAuth()
    {
        var pageUrl = @"https://localhost:7034/admin";
        var url = @$"https://api.worldoftanks.eu/wot/auth/login/?application_id=6d563fd75651dbf9de009418d3ee7f56&redirect_uri={pageUrl}";
        NavigationManager.NavigateTo(url);
    }

    private async Task<bool> ValidateAuth()
    {
        var checkUrl = @$"https://api.worldofwarships.eu/wows/account/info/?application_id=6d563fd75651dbf9de009418d3ee7f56&account_id={accountId}&access_token={accessToken}&fields=private.gold";
        
        var request = new HttpRequestMessage(HttpMethod.Get,checkUrl);
        var response = await Client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var data = await response.Content.ReadFromJsonAsync<WgResponse>();
            
            if (data is not null && data.Status.Equals("ok"))
            {
                return data.Data.First().Value.Private?.Gold is not null;
            }
        }
        
        return false;
    }

    private class WgResponse
    {
        [JsonPropertyName("status")]
        public string Status { get; set; } = string.Empty;

        [JsonPropertyName("data")]
        public Dictionary<string, Data> Data { get; set; } = new();
    }

    private class Data
    {
        [JsonPropertyName("private")]
        public Private? Private { get; set; }
    }

    private class Private
    {
        [JsonPropertyName("gold")]
        public int? Gold { get; set; }
    }

}