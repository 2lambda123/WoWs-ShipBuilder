@page "/charts"
@using WoWsShipBuilder.Web.Utility
@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Core.Services
@using WoWsShipBuilder.DataStructures
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Enums
@using WoWsShipBuilder.Core.DataUI
@using WoWsShipBuilder.Web.Dialogs
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Util
@using System.ComponentModel
@using System.Linq
@using DynamicData
@inject NavigationManager navManager
@inject Localizer localizer
@inject IAppDataService webAppDataService
@inject IDialogService dialogService

<PageTitle>WoWs ShipBuilder: Charts</PageTitle>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Centered="true" Color="Color.Primary" ActivePanelIndexChanged="ReloadCharts" Outlined="true" Border="true">
    <MudTabPanel Text="@Translation.ChartsWeb_DispersionCharts">
        <MudButton OnClick="EditCharts" Variant="Variant.Filled" Color="Color.Primary" Class="d-flex mx-auto" Disabled="processing">
            @if (processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2" Typo="Typo.button">
                    @Translation.ShipAndShellSelectionDialogWeb_Loading
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.button">
                    @Translation.ChartsWeb_AddRemoveShips
                </MudText>
            }
        </MudButton>
        <MudContainer>
            <Chart Config="horizontalDispConfig"/>
            <Chart Config="verticalDispConfig"/>
        </MudContainer>
    </MudTabPanel>
    <MudTabPanel Text="@Translation.ChartsWeb_ShellTrajectoryChart">
        <MudButton OnClick="EditCharts" Variant="Variant.Filled" Color="Color.Primary" Class="d-flex mx-auto" Disabled="processing">
            @if (processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2" Typo="Typo.button">
                    @Translation.ShipAndShellSelectionDialogWeb_Loading
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.button">
                    @Translation.ChartsWeb_AddRemoveShips
                </MudText>
            }
        </MudButton>
        <MudContainer>
            <MudGrid Class="d-inline-flex" Style="flex-direction: column">
                <MudItem Class="z-20 mt-1 ml-auto mr-3 d-inline-flex" xs="2" md="1" Style="position: absolute; align-self: flex-end">
                    <MudNumericField Value="range" Label="@Translation.ShipStats_Range" Variant="Variant.Outlined" Immediate="true" ValueChanged="UpdateTrajectory" T="double" DebounceInterval="250" Disabled="processing" Margin="Margin.Dense" Min="0"/>
                </MudItem>
                <MudItem Class="z-10" xs="12">
                    <Chart Config="trajectoryConfig"/>
                </MudItem>
            </MudGrid>
        </MudContainer>
    </MudTabPanel>
    <MudTabPanel Text="@Translation.ChartsWeb_BallisticCharts">
        <MudButton OnClick="EditCharts" Variant="Variant.Filled" Color="Color.Primary" Class="d-flex mx-auto" Disabled="processing">
            @if (processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2" Typo="Typo.button">
                    @Translation.ShipAndShellSelectionDialogWeb_Loading
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.button">
                    @Translation.ChartsWeb_AddRemoveShips
                </MudText>
            }
        </MudButton>
        <MudContainer>
            <Chart Config="penetrationConfig"/>
            <Chart Config="flightTimeConfig"/>
            <Chart Config="impactVelocityConfig"/>
            <Chart Config="impactAngleConfig"/>
        </MudContainer>
    </MudTabPanel>
</MudTabs>

@code
{
    private LineConfig horizontalDispConfig = new();
    private LineConfig verticalDispConfig = new();
    private LineConfig penetrationConfig = new();
    private LineConfig flightTimeConfig = new();
    private LineConfig impactVelocityConfig = new();
    private LineConfig impactAngleConfig = new();
    private LineConfig trajectoryConfig = new();

    private int colorCounter;
    private static readonly System.Drawing.Color[] ChartColors = GenerateColors();
    private bool processing;
    private bool isFirstRendering = true;
    private double range = 10;

    private string shellIndexFromUrl = string.Empty;
    private string[] shipIndexesFromUrl = {};
    private readonly Dictionary<string, ShellSelectionWrapper> displayedShips = new();
    private readonly Dictionary<string, Dictionary<double, Ballistic>> trajectoriesCache = new();
    private readonly Dictionary<string, (IEnumerable<Point> horizontalDisp, IEnumerable<Point> verticalDisp)> dispersionsCache = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        CreateChartConfig();

        if (navManager.TryGetQueryString("shellIndex", out string shellIndex))
        {
            shellIndexFromUrl = shellIndex;
        }
        if (navManager.TryGetQueryString("shipIndex", out string shipIndex))
        {
            shipIndexesFromUrl = shipIndex.Split(',');
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender && shipIndexesFromUrl.Length > 0) await MakeChartsFromUrl();
    }

    private async Task EditCharts()
    {
        processing = true;
        var selectedShipList = await GetSelectedShips();
        if (selectedShipList is null || selectedShipList.Cancelled)
        {
            processing = false;
            return;
        }
        await UpdateCharts(((IEnumerable<ShellSelectionWrapper>) selectedShipList.Data).ToList());
        processing = false;
    }

    private async Task<DialogResult?> GetSelectedShips()
    {
        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.ExtraLarge,
        };
        var parameters = new DialogParameters
        {
            ["shipList"] = displayedShips.Values.DistinctBy(x => x.ShipIndex).ToList(),
        };
        var dialog = dialogService.Show<ShipAndShellSelectionDialog>("ShipAndShellSelectionDialog", parameters, options);
        return await dialog.Result;
    }

    private async Task UpdateCharts(List<ShellSelectionWrapper> selectedShips)
    {
        List<string> labelNames = new();
        foreach (var selectedShip in selectedShips)
        {
            string shipName = Localizer.Instance[$"{selectedShip.ShipIndex}_FULL"].Localization;
            foreach ((string shellIndex, (var shell, var dispersionValues, bool value)) in selectedShip.ArtilleryDataDictionary)
            {
                if (!value) continue;

                await Task.Yield();

                string shellName = Localizer.Instance[$"{shellIndex}"].Localization;
                var labelName = $"{shipName} - {shellName}";
                labelNames.Add(labelName);

                if (displayedShips.ContainsKey(labelName)) continue;

                displayedShips.Add(labelName, selectedShip);

                Dictionary<double, Ballistic> ballisticSeries = trajectoriesCache.ContainsKey(labelName) ? trajectoriesCache[labelName] : BallisticHelper.CalculateBallistic(shell, selectedShip.MaxRange);
                IEnumerable<Point> horizontalDispSeries;
                IEnumerable<Point> verticalDispSeries;
                if (dispersionsCache.ContainsKey(labelName))
                {
                    horizontalDispSeries = dispersionsCache[labelName].horizontalDisp;
                    verticalDispSeries = dispersionsCache[labelName].verticalDisp;
                }
                else
                {
                    horizontalDispSeries = CreateHorizontalDispersionSeries(dispersionValues, selectedShip.MaxRange);
                    verticalDispSeries = CreateVerticalDispersionSeries(dispersionValues, selectedShip.MaxRange);
                }
                var lineColor = GetColor();
                AddDispersionChartDataset(labelName, (horizontalDispSeries, verticalDispSeries), lineColor);
                AddTrajectoryChartDataset(labelName, ballisticSeries, lineColor);
                await Task.Yield();
                AddBallisticChartDataset(labelName, ballisticSeries, lineColor);
            }
        }

        var removedShips = displayedShips.Where(x => !labelNames.Contains(x.Key));
        foreach ((string labelName, _) in removedShips)
        {
            RemoveChartDataset(labelName);
        }
        StateHasChanged();
    }

    private void AddDispersionChartDataset(string name, (IEnumerable<Point> horizontalDisp, IEnumerable<Point> verticalDisp) data, string chartLineColor)
    {
        if (!dispersionsCache.ContainsKey(name))
        {
            dispersionsCache.Add(name, data);
        }
        (IEnumerable<Point> horizontalDisp, IEnumerable<Point> verticalDisp) = data;
        AddChartDataset(name, horizontalDisp, horizontalDispConfig, chartLineColor);
        AddChartDataset(name, verticalDisp, verticalDispConfig, chartLineColor);
    }

    private void AddTrajectoryChartDataset(string name, Dictionary<double, Ballistic> data, string chartLineColor)
    {
        var validData = new List<KeyValuePair<double, Ballistic>>
        {
            data.Where(x => x.Key / 1000 > range),
        };
        if (validData.Count == 0)
        {
            validData.Add(data.Last());
        }
        if (!trajectoriesCache.ContainsKey(name))
        {
            trajectoriesCache.Add(name, data);
        }
        IEnumerable<Point> pointsList = validData.First().Value.Coordinates.Select(x => new Point(x.X / 1000, x.Y));
        AddChartDataset(name, pointsList, trajectoryConfig, chartLineColor);
    }

    private void AddBallisticChartDataset(string name, Dictionary<double, Ballistic> data, string chartLineColor)
    {
        CreateBallisticChartDataset(name, data, BallisticParameter.Penetration, chartLineColor);
        CreateBallisticChartDataset(name, data, BallisticParameter.FlightTime, chartLineColor);
        CreateBallisticChartDataset(name, data, BallisticParameter.ImpactVelocity, chartLineColor);
        CreateBallisticChartDataset(name, data, BallisticParameter.ImpactAngle, chartLineColor);
    }

    private void CreateBallisticChartDataset(string name, Dictionary<double, Ballistic> data, BallisticParameter ballisticParameter, string chartLineColor)
    {
        LineConfig chartConfig;
        IEnumerable<Point> pointsList;
        switch (ballisticParameter)
        {
            case BallisticParameter.Penetration:
                pointsList = data.Select(x => new Point(x.Key / 1000, x.Value.Penetration));
                chartConfig = penetrationConfig;
                break;
            case BallisticParameter.ImpactVelocity:
                pointsList = data.Select(x => new Point(x.Key / 1000, x.Value.Velocity));
                chartConfig = impactVelocityConfig;
                break;
            case BallisticParameter.FlightTime:
                pointsList = data.Select(x => new Point(x.Key / 1000, x.Value.FlightTime));
                chartConfig = flightTimeConfig;
                break;
            case BallisticParameter.ImpactAngle:
                pointsList = data.Select(x => new Point(x.Key / 1000, x.Value.ImpactAngle));
                chartConfig = impactAngleConfig;
                break;
            default:
                throw new InvalidEnumArgumentException();
        }
        AddChartDataset(name, pointsList, chartConfig, chartLineColor);
    }

    private static void AddChartDataset(string name, IEnumerable<Point> data, LineConfig chartConfig, string chartLineColor)
    {
        var dataset = new LineDataset<Point>(data)
        {
            Label = name,
            BackgroundColor = chartLineColor,
            BorderColor = chartLineColor,
            Fill = FillingMode.Disabled,
            PointRadius = 0,
            CubicInterpolationMode = CubicInterpolationMode.Monotone,
        };
        chartConfig.Data.Datasets.Add(dataset);
    }

    private void RemoveChartDataset(string name)
    {
        horizontalDispConfig.Data.Datasets.RemoveMany(horizontalDispConfig.Data.Datasets.Where(x => (x as LineDataset<Point>)!.Label.Equals(name)));
        verticalDispConfig.Data.Datasets.RemoveMany(verticalDispConfig.Data.Datasets.Where(x => (x as LineDataset<Point>)!.Label.Equals(name)));
        penetrationConfig.Data.Datasets.RemoveMany(penetrationConfig.Data.Datasets.Where(x => (x as LineDataset<Point>)!.Label.Equals(name)));
        flightTimeConfig.Data.Datasets.RemoveMany(flightTimeConfig.Data.Datasets.Where(x => (x as LineDataset<Point>)!.Label.Equals(name)));
        impactVelocityConfig.Data.Datasets.RemoveMany(impactVelocityConfig.Data.Datasets.Where(x => (x as LineDataset<Point>)!.Label.Equals(name)));
        impactAngleConfig.Data.Datasets.RemoveMany(impactAngleConfig.Data.Datasets.Where(x => (x as LineDataset<Point>)!.Label.Equals(name)));
        trajectoryConfig.Data.Datasets.RemoveMany(trajectoryConfig.Data.Datasets.Where(x => (x as LineDataset<Point>)!.Label.Equals(name)));

        displayedShips.Remove(name);
    }

    private void ReloadCharts()
    {
        if (isFirstRendering)
        {
            isFirstRendering = false;
            return;
        }

        Dictionary<ChartDatasets, IList<IDataset>> datasets = new()
        {
            {ChartDatasets.HorizontalDispersion, horizontalDispConfig.Data.Datasets},
            {ChartDatasets.VerticalDispersion, verticalDispConfig.Data.Datasets},
            {ChartDatasets.Penetration, penetrationConfig.Data.Datasets},
            {ChartDatasets.FlightTime, flightTimeConfig.Data.Datasets},
            {ChartDatasets.ImpactVelocity, impactVelocityConfig.Data.Datasets},
            {ChartDatasets.ImpactAngle, impactAngleConfig.Data.Datasets},
            {ChartDatasets.Trajectory, trajectoryConfig.Data.Datasets},
        };

        CreateChartConfig();

        horizontalDispConfig.Data.Datasets.Add(datasets[ChartDatasets.HorizontalDispersion]);
        verticalDispConfig.Data.Datasets.Add(datasets[ChartDatasets.VerticalDispersion]);
        penetrationConfig.Data.Datasets.Add(datasets[ChartDatasets.Penetration]);
        flightTimeConfig.Data.Datasets.Add(datasets[ChartDatasets.FlightTime]);
        impactVelocityConfig.Data.Datasets.Add(datasets[ChartDatasets.ImpactVelocity]);
        impactAngleConfig.Data.Datasets.Add(datasets[ChartDatasets.ImpactAngle]);
        trajectoryConfig.Data.Datasets.Add(datasets[ChartDatasets.Trajectory]);
    }

    private void CreateChartConfig()
    {
        horizontalDispConfig = SetChartConfig($"{Translation.DispersionGraphWindow_Horizontal} {Translation.ShipStats_Dispersion}", $"{Translation.ShipStats_Dispersion} [{Translation.Unit_M}]");
        verticalDispConfig = SetChartConfig($"{Translation.DispersionGraphWindow_Vertical} {Translation.ShipStats_Dispersion}", $"{Translation.ShipStats_Dispersion} [{Translation.Unit_M}]");
        penetrationConfig = SetChartConfig($"{Translation.ShipStats_Penetration}", $"{Translation.ShipStats_Penetration} [{Translation.Unit_MM}]");
        flightTimeConfig = SetChartConfig($"{Translation.DispersionGraphWindow_FlightTime}", $"{Translation.DispersionGraphWindow_FlightTime} [{Translation.Unit_S}]");
        impactVelocityConfig = SetChartConfig($"{Translation.DispersionGraphWindow_ImpactVelocity}", $"{Translation.DispersionGraphWindow_ImpactVelocity} [{Translation.Unit_MPS}]");
        impactAngleConfig = SetChartConfig($"{Translation.DispersionGraphWindow_ImpactAngle}", $"{Translation.DispersionGraphWindow_ImpactAngle} [{Translation.Unit_Degree}]");
        trajectoryConfig = SetChartConfig($"{Translation.DispersionGraphWindow_ShellsPath}", $"{Translation.ChartsWeb_Height} [{Translation.Unit_KM}]", true);
    }

    private LineConfig SetChartConfig(string title, string yLabel, bool isShellTrajectoryChart = false)
    {
        var xLabel = $"{Translation.ShipStats_Range} [{Translation.Unit_KM}]";
        string? foregroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.DarkGray);
        string? gridColor = ColorUtil.FromDrawingColor(System.Drawing.Color.DimGray);
        var gridDash = new double[] {5, 5};
        return new()
        {
            Options = new()
            {
                Responsive = true,
                SpanGaps = true,
                Title = new()
                {
                    Display = true,
                    Text = title,
                    FontColor = foregroundColor,
                    FontSize = 30,
                },
                Tooltips = new()
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true,
                    DisplayColors = true,
                },
                Hover = new()
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true,
                },
                Legend = new()
                {
                    Labels = new()
                    {
                        FontColor = foregroundColor,
                    },
                },
                Scales = new()
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new()
                            {
                                Display = true,
                                FontColor = foregroundColor,
                                MaxTicksLimit = 10,
                                BeginAtZero = true,
                            },
                            ScaleLabel = new()
                            {
                                LabelString = xLabel,
                                FontColor = foregroundColor,
                                Display = true,
                                FontSize = 15,
                            },
                            GridLines = new()
                            {
                                ZeroLineColor = foregroundColor,
                                Display = true,
                                DrawTicks = true,
                                TickMarkLength = 5,
                                DrawBorder = true,
                                ZeroLineWidth = 3,
                                DrawOnChartArea = true,
                                Color = gridColor,
                                BorderDash = gridDash,
                            },
                        },
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new()
                            {
                                Display = true,
                                FontColor = foregroundColor,
                                MaxTicksLimit = 10,
                                BeginAtZero = true,
                                SuggestedMax = isShellTrajectoryChart ? (int)(range / 4 * 1000) : 0,
                            },
                            ScaleLabel = new()
                            {
                                LabelString = yLabel,
                                FontColor = foregroundColor,
                                Display = true,
                                FontSize = 15,
                            },
                            GridLines = new()
                            {
                                ZeroLineColor = foregroundColor,
                                Display = true,
                                DrawTicks = true,
                                TickMarkLength = 5,
                                DrawBorder = true,
                                ZeroLineWidth = 3,
                                DrawOnChartArea = true,
                                Color = gridColor,
                                BorderDash = gridDash,
                            },
                        },
                    },
                },
            },
        };
    }

    private void UpdateTrajectory(double aimingRange)
    {
        processing = true;
        range = aimingRange;
        ((LinearCartesianAxis) trajectoryConfig.Options.Scales.YAxes.First()).Ticks.SuggestedMax = (int)(aimingRange / 4 * 1000);
        foreach ((string name, Dictionary<double, Ballistic> data) in trajectoriesCache)
        {
            if (!displayedShips.ContainsKey(name)) continue;
            var dataset = trajectoryConfig.Data.Datasets.First(x => (x as LineDataset<Point>)!.Label.Equals(name)) as LineDataset<Point>;
            string color = dataset!.BackgroundColor;
            trajectoryConfig.Data.Datasets.Remove(dataset);
            AddTrajectoryChartDataset(name, data, color);
        }

        processing = false;
    }

    private async Task MakeChartsFromUrl()
    {
        processing = true;
        List<ShellSelectionWrapper> selectedShipList = new();
        if (shellIndexFromUrl.Length > 0)
        {
            var shipSummary = AppData.ShipSummaryList!.First(x => x.Index.Equals(shellIndexFromUrl));
            var ship = await webAppDataService.GetShipFromSummary(shipSummary);

            Dictionary<string, ArtilleryData> artilleryData = new();
            var gun = ship!.MainBatteryModuleList.Values.First(x => x.Guns.First().AmmoList.Contains(shellIndexFromUrl));
            var shell = await webAppDataService.GetProjectile<ArtilleryShell>(shellIndexFromUrl);

            ArtilleryData data = new(shell, gun.DispersionValues, true);
            artilleryData.Add(shellIndexFromUrl, data);
            ShellSelectionWrapper wrapper = new(shellIndexFromUrl, artilleryData)
            {
                MaxRange = (double) gun.MaxRange,
            };
            selectedShipList.Add(wrapper);
        }
        else
        {
            List<ShellSelectionWrapper> shipList = new();
            foreach (string shipIndex in shipIndexesFromUrl)
            {
                var shipSummary = AppData.ShipSummaryList!.Single(x => x.Index.Equals(shipIndex));
                var ship = await webAppDataService.GetShipFromSummary(shipSummary);

                Dictionary<string, ArtilleryData> artilleryData = new();
                if (ship!.MainBatteryModuleList != null && ship.MainBatteryModuleList.Count > 0)
                {
                    IEnumerable<string> shellIndexes = ship.MainBatteryModuleList.SelectMany(turretModule => turretModule.Value.Guns.SelectMany(gun => gun.AmmoList)).Distinct();
                    foreach (string shellIndex in shellIndexes)
                    {
                        artilleryData.Add(shellIndex, new());
                    }
                }

                ShellSelectionWrapper wrapper = new(shipIndex, artilleryData);
                shipList.Add(wrapper);
            }

            DialogOptions options = new()
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
            };
            var parameters = new DialogParameters
            {
                ["shipList"] = shipList,
            };
            var dialog = dialogService.Show<ShellSelectionDialog>("ShellSelectionDialog", parameters, options);
            var result = await dialog.Result;
            if (result is null || result.Cancelled)
            {
                processing = false;
                return;
            }
            selectedShipList = ((IEnumerable<ShellSelectionWrapper>) result.Data).ToList();
        }

        await UpdateCharts(selectedShipList);
        processing = false;
    }

    /// <summary>
    /// Create the series for the horizontal dispersion.
    /// </summary>
    /// <param name="dispersion"><see cref="Dispersion"/> data of the gun.</param>
    /// <param name="maxRange">Max range of the gun.</param>
    /// <returns>The horizontal dispersion series for the given parameter.</returns>
    private static IEnumerable<Point> CreateHorizontalDispersionSeries(Dispersion dispersion, double maxRange)
    {
        return CreateFunctionSeries(x => dispersion.CalculateHorizontalDispersion(x * 1000), 0, (maxRange * 1.5) / 1000, 0.1);
    }

    /// <summary>
    /// Create the series for the vertical dispersion.
    /// </summary>
    /// <param name="dispersion"><see cref="Dispersion"/> data of the gun.</param>
    /// <param name="maxRange">Max range of the gun.</param>
    /// <returns>The vertical dispersion series for the given parameter.</returns>
    private static IEnumerable<Point> CreateVerticalDispersionSeries(Dispersion dispersion, double maxRange)
    {
        return CreateFunctionSeries(x => dispersion.CalculateVerticalDispersion(maxRange, x * 1000), 0, (maxRange * 1.5) / 1000, 0.1);
    }

    /// <summary>
    /// Create data series using a function <code>f(x)</code>.
    /// </summary>
    /// <param name="f">The function <code>f(x)</code>.</param>
    /// <param name="x0">The start x value.</param>
    /// <param name="x1">The end x value.</param>
    /// <param name="dx">The increment in x.</param>
    /// <returns>A <see cref="List{Point}"/> of <see cref="Point"/></returns>
    private static IEnumerable<Point> CreateFunctionSeries(Func<double, double> f, double x0, double x1, double dx)
    {
        List<Point> dispSeries = new();
        for (double x = x0; x <= x1 + dx * 0.5; x += dx)
            dispSeries.Add(new(x, f(x)));
        return dispSeries;
    }

    private string GetColor()
    {
        if (colorCounter > ChartColors.Length - 1)
        {
            colorCounter = 0;
        }
        var color = ChartColors[colorCounter];
        colorCounter++;
        return ColorUtil.FromDrawingColor(color);
    }

    private static System.Drawing.Color[] GenerateColors()
    {
        var colors = new[]
        {
            System.Drawing.ColorTranslator.FromHtml("#ef6fcc"),
            System.Drawing.ColorTranslator.FromHtml("#62ce75"),
            System.Drawing.ColorTranslator.FromHtml("#f53a4c"),
            System.Drawing.ColorTranslator.FromHtml("#11ccdc"),
            System.Drawing.ColorTranslator.FromHtml("#9166aa"),
            System.Drawing.ColorTranslator.FromHtml("#a4c28a"),
            System.Drawing.ColorTranslator.FromHtml("#c15734"),
            System.Drawing.ColorTranslator.FromHtml("#faa566"),
            System.Drawing.ColorTranslator.FromHtml("#6c7b66"),
            System.Drawing.ColorTranslator.FromHtml("#eda4ba"),
            System.Drawing.ColorTranslator.FromHtml("#2d6df9"),
            System.Drawing.ColorTranslator.FromHtml("#f62ef3"),
            System.Drawing.ColorTranslator.FromHtml("#957206"),
            System.Drawing.ColorTranslator.FromHtml("#a45dff"),
        };
        return colors;
    }

    private enum BallisticParameter
    {
        Penetration,
        FlightTime,
        ImpactVelocity,
        ImpactAngle,
    }

    private enum ChartDatasets
    {
        HorizontalDispersion,
        VerticalDispersion,
        Penetration,
        FlightTime,
        ImpactVelocity,
        ImpactAngle,
        Trajectory,
    }
}