@page "/charts"
@using WoWsShipBuilder.Web.Utility
@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Core.Services
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.Web.Dialogs
@using System.ComponentModel
@using System.Linq
@using DynamicData
@using WoWsShipBuilder.Core.DataContainers
@using WoWsShipBuilder.Core.Localization
@inject NavigationManager NavManager
@inject ILocalizer Localizer
@inject IAppDataService WebAppDataService
@inject IDialogService DialogService
@inject IJSRuntime Ijs
@implements IAsyncDisposable

<PageTitle>WoWs ShipBuilder: Charts</PageTitle>

<MudTabs Elevation="2" PanelClass="pa-6" Centered Color="Color.Primary" Outlined Border KeepPanelsAlive>
    <MudTabPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ChartsWeb_DispersionCharts)).Localization">
        <MudButton OnClick="EditCharts" Variant="Variant.Filled" Color="Color.Primary" Class="d-flex mx-auto" Disabled="processing">
            @if (processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2" Typo="Typo.button">
                    @Localizer.GetAppLocalization(nameof(Translation.ShipAndShellSelectionDialogWeb_Loading)).Localization
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.button">
                    @Localizer.GetAppLocalization(nameof(Translation.ChartsWeb_AddRemoveShips)).Localization
                </MudText>
            }
        </MudButton>
        <div>
            <canvas id="@HorizontalDispersionId"></canvas>
        </div>
        <div>
            <canvas id="@VerticalDispersionId"></canvas>
        </div>
    </MudTabPanel>
    <MudTabPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ChartsWeb_ShellTrajectoryChart)).Localization">
         <MudButton OnClick="EditCharts" Variant="Variant.Filled" Color="Color.Primary" Class="d-flex mx-auto" Disabled="processing">
            @if (processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2" Typo="Typo.button">
                    @Localizer.GetAppLocalization(nameof(Translation.ShipAndShellSelectionDialogWeb_Loading)).Localization
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.button">
                    @Localizer.GetAppLocalization(nameof(Translation.ChartsWeb_AddRemoveShips)).Localization
                </MudText>
            }
        </MudButton>
        <div>
            <canvas id="@TrajectoryId"></canvas>
        </div>
    </MudTabPanel>
    <MudTabPanel Text="@Localizer.GetAppLocalization(nameof(Translation.ChartsWeb_BallisticCharts)).Localization">
         <MudButton OnClick="EditCharts" Variant="Variant.Filled" Color="Color.Primary" Class="d-flex mx-auto" Disabled="processing">
            @if (processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                <MudText Class="ms-2" Typo="Typo.button">
                    @Localizer.GetAppLocalization(nameof(Translation.ShipAndShellSelectionDialogWeb_Loading)).Localization
                </MudText>
            }
            else
            {
                <MudText Typo="Typo.button">
                    @Localizer.GetAppLocalization(nameof(Translation.ChartsWeb_AddRemoveShips)).Localization
                </MudText>
            }
        </MudButton>
        <div>
            <canvas id="@PenetrationId"></canvas>
        </div>
        <div>
            <canvas id="@FlightTimeId"></canvas>
        </div>
        <div>
            <canvas id="@ImpactVelocityId"></canvas>
        </div>
        <div>
            <canvas id="@ImpactAngleId"></canvas>
        </div>
    </MudTabPanel>
</MudTabs>

@code
{
    private IJSObjectReference? module;
    private const string HorizontalDispersionId = "horizontal-dispersion";
    private const string VerticalDispersionId = "vertical-dispersion";
    private const string TrajectoryId = "trajectory";
    private const string PenetrationId = "penetration";
    private const string FlightTimeId = "flight-time";
    private const string ImpactVelocityId = "impact-velocity";
    private const string ImpactAngleId = "impact-angle";
    
    private string shellIndexFromUrl = string.Empty;
    private string[] shipIndexesFromUrl = {};

    private bool processing = false;
    private double range = 10;
    
    private readonly Dictionary<string, ShellSelectionWrapper> displayedShips = new();
    private ChartsHelper.EllipsePlanes selectedVertDispPlane = ChartsHelper.EllipsePlanes.RealPlane;
    private readonly Dictionary<string, (IEnumerable<Point> vertDispAtImpactAngle, IEnumerable<Point> vertDispOnWater, IEnumerable<Point> vertDispOnPerpendicularToWater)> vertDispersionsCache = new();
    private readonly Dictionary<string, Dictionary<double, Ballistic>> ballisticCache = new();
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        if (NavManager.TryGetQueryString("shellIndex", out string shellIndex))
        {
            shellIndexFromUrl = shellIndex;
        }
        if (NavManager.TryGetQueryString("shipIndex", out string shipIndex))
        {
            shipIndexesFromUrl = shipIndex.Split(',');
        }
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            module = await Ijs.InvokeAsync<IJSObjectReference>("import",
                "/scripts/ChartsHelper.js");
            await SetupCharts();
            if (shipIndexesFromUrl.Any())
            {
                List<ShellSelectionWrapper> selectedShipList = new();
                processing = true;
                
                if (shellIndexFromUrl.Any())
                {
                    string shipIndex = shipIndexesFromUrl.First();
                    var shipSummary = AppData.ShipSummaryList!.First(x => x.Index.Equals(shipIndex));
                    var ship = await WebAppDataService.GetShipFromSummary(shipSummary);

                    var gun = ship!.MainBatteryModuleList.Values.First(x => x.Guns.First().AmmoList.Contains(shellIndexFromUrl));
                    var shell = await WebAppDataService.GetProjectile<ArtilleryShell>(shellIndexFromUrl);

                    Dictionary<string, ArtilleryData> artilleryData = new();
                    ArtilleryData data = new(shell, gun.DispersionValues, true);
                    artilleryData.Add(shellIndexFromUrl, data);
                    ShellSelectionWrapper wrapper = new(shipIndex, artilleryData, (double) gun.MaxRange);

                    selectedShipList.Add(wrapper);
                }
                else
                {
                    List<ShellSelectionWrapper> shipList = new();
                    foreach (string shipIndex in shipIndexesFromUrl)
                    {
                        var shipSummary = AppData.ShipSummaryList!.Single(x => x.Index.Equals(shipIndex));
                        var ship = await WebAppDataService.GetShipFromSummary(shipSummary);
                        Dictionary<string, ArtilleryData> artilleryData = new();
                        if (ship!.MainBatteryModuleList != null && ship.MainBatteryModuleList.Count > 0)
                        {
                            IEnumerable<string> shellIndexes = ship.MainBatteryModuleList.SelectMany(turretModule => turretModule.Value.Guns.SelectMany(gun => gun.AmmoList)).Distinct();
                            foreach (string shellIndex in shellIndexes)
                            {
                                artilleryData.Add(shellIndex, new());
                            }
                        }

                        ShellSelectionWrapper wrapper = new(shipIndex, artilleryData, -1);
                        shipList.Add(wrapper);
                    }

                    DialogOptions options = new()
                    {
                        MaxWidth = MaxWidth.Small,
                        FullWidth = true,
                    };

                    var parameters = new DialogParameters
                    {
                        ["shipList"] = shipList,
                    };

                    var dialog = DialogService.Show<ShellSelectionDialog>("ShellSelectionDialog", parameters, options);
                    var result = await dialog.Result;
                    if (result is null || result.Cancelled)
                    {
                        processing = false;
                        return;
                    }
                    selectedShipList = ((IEnumerable<ShellSelectionWrapper>) result.Data).ToList();
                }
                await AddShips(selectedShipList);
               
            }
        }
        processing = false;
    }

    private async Task SetupCharts()
    {
        if (module is not null)
        {
            var km = Localizer.GetAppLocalization(nameof(Translation.Unit_KM)).Localization;
            var m = Localizer.GetAppLocalization(nameof(Translation.Unit_M)).Localization;
            var rangeString = Localizer.GetAppLocalization(nameof(Translation.DispersionGraphWindow_Range)).Localization;
            var s = Localizer.GetAppLocalization(nameof(Translation.Unit_S)).Localization;
            var mm = Localizer.GetAppLocalization(nameof(Translation.Unit_MM)).Localization;
            var degree = Localizer.GetAppLocalization(nameof(Translation.Unit_Degree)).Localization;
            var mps = Localizer.GetAppLocalization(nameof(Translation.Unit_MPS)).Localization;

            
            await module.InvokeVoidAsync("SetupGlobalChartConfig");
            //CreateChart(chartId, title, xLabel, yLabel, xUnit, yUnit)
            await module.InvokeVoidAsync("CreateChart", HorizontalDispersionId, Localizer.GetAppLocalization(nameof(Translation.DispersionGraphWindow_Horizontal)).Localization + " " + Localizer.GetAppLocalization(nameof(Translation.ShipStats_Dispersion)).Localization, rangeString, Localizer.GetAppLocalization(nameof(Translation.ShipStats_Dispersion)).Localization, km, m);
            await module.InvokeVoidAsync("CreateChart", VerticalDispersionId, Localizer.GetAppLocalization(nameof(Translation.DispersionGraphWindow_Vertical)).Localization + " " + Localizer.GetAppLocalization(nameof(Translation.ShipStats_Dispersion)).Localization, rangeString, Localizer.GetAppLocalization(nameof(Translation.ShipStats_Dispersion)).Localization, km, m);
            await module.InvokeVoidAsync("CreateChart", TrajectoryId, Localizer.GetAppLocalization(nameof(Translation.DispersionGraphWindow_ShellsPath)).Localization, rangeString, Localizer.GetAppLocalization(Translation.ChartsWeb_Height).Localization, km, s);
            await module.InvokeVoidAsync("CreateChart", PenetrationId, Localizer.GetAppLocalization(nameof(Translation.ShipStats_Penetration)).Localization, rangeString, Localizer.GetAppLocalization(nameof(Translation.ShipStats_Penetration)).Localization, km, mm);
            await module.InvokeVoidAsync("CreateChart", FlightTimeId, Localizer.GetAppLocalization(nameof(Translation.DispersionGraphWindow_FlightTime)).Localization, rangeString, Localizer.GetAppLocalization(nameof(Translation.DispersionGraphWindow_FlightTime)).Localization, km, s);
            await module.InvokeVoidAsync("CreateChart", ImpactVelocityId, Localizer.GetAppLocalization(nameof(Translation.DispersionGraphWindow_ImpactVelocity)).Localization, rangeString, Localizer.GetAppLocalization(nameof(Translation.DispersionGraphWindow_ImpactVelocity)).Localization, km, mps);
            await module.InvokeVoidAsync("CreateChart", ImpactAngleId, Localizer.GetAppLocalization(nameof(Translation.DispersionGraphWindow_ImpactAngle)).Localization, rangeString, Localizer.GetAppLocalization(nameof(Translation.DispersionGraphWindow_ImpactAngle)).Localization, km, degree);
        }
    }

    private async Task AddShips(List<ShellSelectionWrapper> shipList)
    {
        foreach (var selectedShip in shipList)
        {
            string shipName = Localizer.GetGameLocalization($"{selectedShip.ShipIndex}_FULL").Localization;
            foreach ((string shellIndex, (var shell, var dispersionValues, bool shellSelected)) in selectedShip.ArtilleryDataDictionary)
            {
                if (!shellSelected) continue;
                
                string shellName = Localizer.GetGameLocalization(shellIndex).Localization;
                var labelName = $"{shipName} - {shellName}";
                
                if (displayedShips.ContainsKey(labelName)) continue;
                
                Dictionary<double, Ballistic> ballisticSeries = GetBallistic(labelName, shell, selectedShip.MaxRange);
                var horizontalDisp = ChartsHelper.CreateHorizontalDispersionSeries(dispersionValues, selectedShip.MaxRange);
                var verticalDispSeries = GetVerticalDispersion(labelName, dispersionValues, selectedShip.MaxRange, ballisticSeries);
                var trajectory = ChartsHelper.CreateTrajectoryDataset(ballisticSeries, range);
                
                await AddAllDatasets(labelName, horizontalDisp, verticalDispSeries, ballisticSeries, trajectory);
                
                displayedShips.Add(labelName, selectedShip);
            }
        }
    }

    private Dictionary<double, Ballistic> GetBallistic(string label, ArtilleryShell shell, double maxRange)
    {
        if (ballisticCache.ContainsKey(label))
        {
            return ballisticCache[label];
        }
        else
        {
            var ballisticSeries = BallisticHelper.CalculateBallistic(shell, maxRange);
            ballisticCache.Add(label, ballisticSeries);
            return ballisticSeries;
        }
    }
    
    private IEnumerable<Point> GetVerticalDispersion(string label, Dispersion dispersionValues, double maxRange, Dictionary<double, Ballistic> ballisticSeries)
    {
        if (vertDispersionsCache.ContainsKey(label))
        {
            var verticalDispersions = vertDispersionsCache[label];
            return ChartsHelper.SelectVerticalDispersionDataset(verticalDispersions, selectedVertDispPlane);
        }
        else
        {
            var verticalDispersions = ChartsHelper.CreateVerticalDispersionSeries(dispersionValues, maxRange, ballisticSeries);
            vertDispersionsCache.Add(label, verticalDispersions);
            return ChartsHelper.SelectVerticalDispersionDataset(verticalDispersions, selectedVertDispPlane);
        }
    }
    
    private async Task ChangeVerticalDispPlane()
    {
        foreach (var item in displayedShips)
        {
            await RemoveAllData(VerticalDispersionId);
            var verticalDisp = vertDispersionsCache[item.Key];
            var selectedVertical = ChartsHelper.SelectVerticalDispersionDataset(verticalDisp, selectedVertDispPlane);
            await AddData(VerticalDispersionId, item.Key, selectedVertical);
        }
    }

    private async Task UpdateTrajectory(double aimingRange)
    {
        range = aimingRange;
        foreach (var item in displayedShips)
        {
            await RemoveAllData(TrajectoryId);
            var ballisticSeries = ballisticCache[item.Key];
            var trajectory = ChartsHelper.CreateTrajectoryDataset(ballisticSeries, range);
            await AddData(TrajectoryId, item.Key, trajectory);
        }
    }
    
    private async Task EditCharts()
    {
        processing = true;
        var selectedShipList = await GetSelectedShips();
        if (selectedShipList is null || selectedShipList.Cancelled)
        {
            processing = false;
            return;
        }
        await AddShips(((IEnumerable<ShellSelectionWrapper>) selectedShipList.Data).ToList());
        processing = false;
        StateHasChanged();
    }
    
    private async Task<DialogResult?> GetSelectedShips()
    {
        DialogOptions options = new()
        {
            MaxWidth = MaxWidth.ExtraLarge,
        };
        var parameters = new DialogParameters
        {
            ["shipList"] = displayedShips.Values.DistinctBy(x => x.ShipIndex).ToList(),
        };
        var dialog = DialogService.Show<ShipAndShellSelectionDialog>("ShipAndShellSelectionDialog", parameters, options);
        return await dialog.Result;
    }
    
    private async Task AddAllDatasets(string label, IEnumerable<Point> horizontalDisp, IEnumerable<Point> verticalDisp, Dictionary<double, Ballistic> ballisticSeries, IEnumerable<Point> trajectory)
    {
        await AddData(HorizontalDispersionId, label, horizontalDisp);
        await AddData(VerticalDispersionId, label, verticalDisp);
        await AddData(TrajectoryId, label, trajectory);
        await AddData(PenetrationId, label, ChartsHelper.CreateBallisticChartDataset(ballisticSeries, ChartsHelper.BallisticParameter.Penetration));
        await AddData(FlightTimeId, label, ChartsHelper.CreateBallisticChartDataset(ballisticSeries, ChartsHelper.BallisticParameter.FlightTime));
        await AddData(ImpactVelocityId, label, ChartsHelper.CreateBallisticChartDataset(ballisticSeries, ChartsHelper.BallisticParameter.ImpactVelocity));
        await AddData(ImpactAngleId, label, ChartsHelper.CreateBallisticChartDataset(ballisticSeries, ChartsHelper.BallisticParameter.ImpactAngle));
    }
    
    private async Task RemoveData(string chartId, int index)
    {
        if (module is not null)
        {
            await module.InvokeVoidAsync("RemoveData", chartId, index);
        }
    }

    private async Task RemoveAllData(string chartId)
    {
        if (module is not null)
        {
            await module.InvokeVoidAsync("RemoveAllData", chartId);
        }
    }

    private async Task AddData(string chartId, string label, IEnumerable<Point> data)
    {
        if (module is not null)
        {
            await module.InvokeVoidAsync("AddData", chartId, data.ToArray(), label);
        }
    }
    
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
}
