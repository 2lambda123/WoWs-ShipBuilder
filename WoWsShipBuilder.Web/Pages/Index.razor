@page "/"
@using WoWsShipBuilder.Web.Services
@using WoWsShipBuilder.DataStructures
@using System.Globalization
@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Core.Services
@inject IAppDataService appDataService
@inject Localizer localizer
@inject NavigationManager NavManager

<PageTitle>WoWs ShipBuilder</PageTitle>

<MudContainer Class="mt-3">
    <MudText Align="Align.Center" Typo="Typo.h1" Class="main-title">WoWs ShipBuilder</MudText>
    <MudText Align="Align.Center" Typo="Typo.h4">Welcome to the WoWs ShipBuilder web app.</MudText>
    
    <MudGrid Justify="Justify.Center" Class="mt-3" Spacing="2">
        <MudItem xs="12">
            <MudText >
                Select a ship using the following filters.
            </MudText>
        </MudItem>
        <MudItem xs="6" md="3" >
            <MudCheckBox Dense="true" @bind-Checked="@TierFilterChecked" Label="Tier"/>
            <MudSelect T="string" Variant="Variant.Outlined" @bind-Value="@SelectedTier" Placeholder="I~XI" Disabled="@(!TierFilterChecked)">
                @foreach (var item in TierList)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>

        </MudItem>

        <MudItem xs="6" md="3">
            <MudCheckBox Dense="true" @bind-Checked="@ClassFilterChecked" Label="Class"/>
            <MudSelect T="ShipClass?" Variant="Variant.Outlined" @bind-Value="@SelectedClass" Placeholder="All" Disabled="@(!ClassFilterChecked)">
                @foreach (ShipClass? item in ClassList)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>

        </MudItem>

        <MudItem xs="6" md="3">
            <MudCheckBox Dense="true" @bind-Checked="@NationFilterChecked" Label="Nation"/>
            <MudSelect T="Nation?" Variant="Variant.Outlined" @bind-Value="@SelectedNation" Placeholder="All" Disabled="@(!NationFilterChecked)">
                @foreach (Nation? item in NationList)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>

        </MudItem>

        <MudItem xs="6" md="3">
            <MudCheckBox Dense="true" @bind-Checked="@TypeFilterChecked" Label="Type"/>
            <MudSelect T="ShipCategory?" Variant="Variant.Outlined" @bind-Value="@SelectedType" Placeholder="All" Disabled="@(!TypeFilterChecked)">
                @foreach (ShipCategory? item in TypeList)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>

        </MudItem>
        <MudItem xs="12" md="4">
            @foreach (var ship in SelectedShips)
            {
                <MudChip Text="@ship" Label="true" OnClose="@(() => RemoveShip(ship))"/>
            }
            <MudTextField T="string" Variant="Variant.Outlined" Placeholder="Search ship..." @bind-Text="@InputText" Immediate="true" DebounceInterval="150" Margin="Margin.Normal"/>
            <MudCard Style="max-height: 300px; overflow:auto" Outlined="true">
                <MudList @ref="mudList" Clickable="true"  SelectedValueChanged="AddShip">
                    <MudVirtualize IsEnabled="true" Items="@SummaryList" Context="pair">
                        <MudListItem Style="text-align: center" Value="@pair.ToString()">
                            <MudText Color="Color.Secondary">@pair.ToString()</MudText>
                        </MudListItem>
                    </MudVirtualize>
                </MudList>
            </MudCard>
        </MudItem>
    </MudGrid>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Test">Test</MudButton>
    <MudText>@data</MudText>
    <MudButton Disabled="@(SelectedShips.Count == 0)" Variant="Variant.Filled" Color="Color.Primary" OnClick="@GoToShipPage">Go to ship page</MudButton>
</MudContainer>

@code
{
    private string shipBuilderIcon = @"<path d=""m7.2736 0.21441-4.2647 2.4057v16.062l8.991 5.103 8.9911-5.103v-16.062l-4.2525-2.4057zm0.13365 1.215h9.1855l3.1833 1.7982v14.848l-7.7761 4.4955-7.7761-4.4955v-14.848zm-0.60676 1.6039v1.5794h0.37295c-8.816e-4 0.11256-0.00153 0.02199-0.00153 0.13067 0 0.11299 0.027159 0.14681 0.14592 0.14681h0.14592l0.00116 1.7654-0.00373 1.7527 0.38272 0.30338s-0.01905 0.043017-0.07045 0.1024c-0.060503 0.087041-0.0565 0.21078-0.029343 0.2673 0.027157 0.056517 0.089923 0.11825 0.16983 0.13304 0.072913 0.00454 0.1998-0.031013 0.2626-0.1429 0.044113-0.078596 0.066364-0.1568 0.049432-0.17373-0.079212 0.012993-0.13556 0.058947-0.18601 0.117-0.012179 0.038906-0.065396 0.063458-0.096121 0.062596-0.030725-8.713e-4 -0.055135-0.0081-0.071753-0.078774-0.012988-0.055255 0.068199-0.16181 0.1815-0.28692l0.36774-0.30338-0.002554-3.5181h0.14592c0.11536 0 0.14588-0.034741 0.14588-0.13616v-0.14132h2.2202v6.9013h-2.0898v3.4506l3.159 1.7982 3.1591-1.7982v-3.4506h-2.0898v-6.9013h2.2205v0.14486c0 0.10788 0.026 0.13263 0.13955 0.13263h0.13965l-0.04766 2.5744 0.37407 0.30724c0.03169 0.056936 0.10537 0.15219 0.16373 0.20261 0.08737 0.075481 0.09389 0.10403 0.03692 0.16174-0.05721 0.057959-0.08642 0.047325-0.1688-0.061706-0.11664-0.15437-0.18709-0.11614-0.139 0.075472 0.03814 0.15192 0.26183 0.23712 0.39843 0.15164 0.13716-0.085822 0.13901-0.33911 0.0032-0.44154l-0.11693-0.088215 0.47079-0.30673-0.04887-2.5749h0.14086c0.11356 0 0.13965-0.024739 0.13965-0.13263 0-0.082538 0.03004-0.14486 0.07956-0.14486h0.34393v-1.5794h-6.2681zm0.48093 0.2673h0.87369l-0.43684 0.32761zm1.3801 0h0.87606l-0.43801 0.32854zm1.3932 0h0.87606l-0.43596 0.33007zm3.0145 0h0.87346l-0.43471 0.3291zm1.3932 0h0.86039c-0.16464 0.14675-0.42815 0.32417-0.42815 0.32417zm1.3932 0h0.86039l-0.4282 0.32417zm-8.8446 0.19485 0.44215 0.33166-0.43801 0.32849zm1.4039 0 0.43145 0.32356-0.44875 0.33659-0.42285-0.335zm1.3825 0 0.4401 0.33007-0.43596 0.33008-0.45149-0.3204zm4.4053 0 0.43336 0.32515-0.42675 0.335-0.44345-0.33254zm1.3932 0 0.42689 0.33007-0.42029 0.33008-0.4434-0.33254zm1.3932 0 0.0066 0.66015-0.44336-0.33254zm-6.0583 0.19299v0.2692l-0.1795-0.13458zm2.1385 0.00196 0.18015 0.13514-0.18015 0.13639zm-3.9599 0.32593 0.43894 0.32919h-0.87369zm1.3834 6.506e-4 0.43805 0.32854h-0.87606zm3.0132 9.789e-4 0.43675 0.32756h-0.87346zm1.3932 0 0.43675 0.32756h-0.87346zm-7.1883 0.0024 0.43359 0.32519h-0.86304zm8.575 0.00249 0.4302 0.32268h-0.86039zm-4.8422 0.58987h1.1118l-0.55519 0.4866zm-0.17262 0.24423 0.5019 0.4368-0.5019 0.43684zm1.458 0.011675v0.86286l-0.50306-0.43792zm-5.1013 0.02158h0.6271l-0.00964 3.0243c-0.23881 0.063993-0.36475 0.063832-0.60299 0zm8.1275 0h0.55473l0.01446 2.0958c-0.26203 0.070213-0.33306 0.070213-0.5951 0zm-3.7552 0.60001 0.58193 0.50767-0.58193 0.50753-0.58444-0.50753zm-0.72897 0.77487 0.50255 0.4374-0.50255 0.43745zm1.458 0v0.87486l-0.50251-0.43745zm-0.72902 0.63453 0.58324 0.50762-0.58324 0.50757-0.58319-0.50757zm-0.72897 0.77492 0.50255 0.4374-0.50255 0.4374zm1.458 0v0.87481l-0.50251-0.43741zm-0.72902 0.63453 0.58324 0.50758-0.58324 0.50757-0.58319-0.50757zm-0.72897 0.77487 0.50255 0.4374-0.50255 0.4374zm1.458 0v0.87481l-0.50251-0.4374zm-0.72902 0.63448 0.58324 0.50762-0.58324 0.50762-0.58319-0.50762zm-6.561 0.28892v7.4602l6.561 3.7931 6.5611-3.7931v-7.4602l-2.5515 1.5066v3.9609l-4.0095 2.2356-4.0095-2.2356v-3.9609zm5.8321 0.48604 0.4959 0.44312-0.4959 0.43168zm1.458 0v0.8748l-0.4959-0.43168zm-0.72902 0.65145 0.41313 0.36914h-0.82621z"" stroke-width="".053058""/>";

    private MudList mudList;
    
    private string data = default!;

    private List<string> SelectedShips = new();

    private List<string> SummaryList = new();

    private SortedDictionary<string, ShipSummary> totalShipNameDictionary = new();

    private string inputText = string.Empty;
    
    private string InputText
    {
        get => inputText;
        set
        {
            inputText = value;
            ApplyFilter();
        }
    }
    
    #region Checkboxes

    private bool tierFilterChecked;

    public bool TierFilterChecked
    {
        get => tierFilterChecked;
        set
        {
            tierFilterChecked = value;
            if (!value)
            {
                SelectedTier = "";
                ApplyFilter();
            }
        }
    }

    private bool classFilterChecked;

    public bool ClassFilterChecked
    {
        get => classFilterChecked;
        set
        {
            classFilterChecked = value;
            if (!value)
            {
                SelectedClass = null;
                ApplyFilter();
            }
        }
    }

    private bool nationFilterChecked;

    public bool NationFilterChecked
    {
        get => nationFilterChecked;
        set
        {
            nationFilterChecked = value;
            if (!value)
            {
                SelectedNation = null;
                ApplyFilter();
            }
        }
    }

    private bool typeFilterChecked;

    public bool TypeFilterChecked
    {
        get => typeFilterChecked;
        set
        {
            typeFilterChecked = value;
            if (!value)
            {
                SelectedType = null;
                ApplyFilter();
            }
        }
    }
    

    #endregion

    #region Selects
    
    private List<string> TierList = new() {"I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX", "X", "XI"};
    
    public List<ShipClass> ClassList { get; } = Enum.GetValues<ShipClass>().Except(new List<ShipClass> {ShipClass.Auxiliary}).ToList();

    public List<Nation> NationList { get; } = Enum.GetValues<Nation>().Except(new List<Nation> {Nation.Common}).ToList();

    public List<ShipCategory> TypeList { get; } =
        Enum.GetValues<ShipCategory>().Except(new List<ShipCategory> {ShipCategory.Disabled, ShipCategory.Clan}).ToList();

    private string? selectedTier;

    private string? SelectedTier
    {
        get => selectedTier;
        set
        {
            selectedTier = value;
            ApplyFilter();
        }
    }

    private ShipClass? selectedClass;

    private ShipClass? SelectedClass
    {
        get => selectedClass;
        set
        {
            selectedClass = value;
            ApplyFilter();
        }
    }

    private Nation? selectedNation;

    private Nation? SelectedNation
    {
        get => selectedNation;
        set
        {
            selectedNation = value;
            ApplyFilter();
        }
    }

    private ShipCategory? selectedType;

    private ShipCategory? SelectedType
    {
        get => selectedType;
        set
        {
            selectedType = value;
            ApplyFilter();
        }
    }

    #endregion
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        totalShipNameDictionary = new(AppData.ShipSummaryList!.ToDictionary(ship => localizer[$"{ship.Index}_FULL"].Localization, ship => ship));
        SummaryList = totalShipNameDictionary.Select(x => x.Key).ToList();
        SummaryList.Sort();
    }

    private void ApplyFilter()
    {
        string searchText = InputText;

        var items = totalShipNameDictionary.Where(pair => SummaryFilter(pair, searchText)).Select(pair => pair.Key).ToList();
        items.Sort();
        SummaryList.Clear();
        SummaryList.AddRange(items);
        StateHasChanged();
    }

    private void Test()
    {
        data = string.Join("-", SelectedShips);
        throw new Exception();
    }
    
    private bool SummaryFilter(KeyValuePair<string, ShipSummary> valuePair, string textSearch)
    {
        var shipSummary = valuePair.Value;
        bool result = !(TierFilterChecked && !string.IsNullOrWhiteSpace(SelectedTier) && shipSummary.Tier != TierList.IndexOf(SelectedTier!) + 1);

        if (result && ClassFilterChecked && SelectedClass != null && shipSummary.ShipClass != SelectedClass)
        {
            result = false;
        }

        if (result && NationFilterChecked && SelectedNation != null && shipSummary.Nation != SelectedNation)
        {
            result = false;
        }

        if (result && TypeFilterChecked && SelectedType != null && shipSummary.Category != SelectedType)
        {
            return false;
        }

        if (result && !string.IsNullOrWhiteSpace(textSearch))
        {
            result = CultureInfo.CurrentCulture.CompareInfo.IndexOf(valuePair.Key, textSearch, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase) != -1;
        }

        return result;
    }

    private void GoToShipPage()
    {
        var index = totalShipNameDictionary[SelectedShips.First()].Index;
        NavManager.NavigateTo("/ship?shipIndex=" + index);
    }

    private void RemoveShip(string ship)
    {
        SelectedShips.Remove(ship);
        mudList.SelectedValue = null;
    }

    private void AddShip(object obj)
    {
        if (obj != null && !SelectedShips.Contains(obj))
        {
            SelectedShips.Add(obj.ToString());
        }
    }
    
}
