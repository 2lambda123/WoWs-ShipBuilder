@page "/"
@using WoWsShipBuilder.Web.Services
@using Newtonsoft.Json
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.ViewModels.Helper
@using System.Diagnostics
@using System.Reactive.Disposables
@using System.Reactive.Linq
@using DynamicData.Binding
@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Core.Services
@inject IAppSettingsService settingsService
@inject IAppDataService appDataService
@inject Localizer localizer
@inherits ReactiveComponentBase<ShipSelectionWindowViewModel>

<PageTitle>WoWs ShipBuilder</PageTitle>

<MudContainer>
    <MudText Align="Align.Center" Typo="Typo.h1" Class="main-title">WoWs ShipBuilder</MudText>
    <MudText Align="Align.Center" >
        Welcome to the WoWs ShipBuilder web app.
    </MudText>
    <MudText>
        Settings:
        @JsonConvert.SerializeObject(settingsService.CurrentSettings, Formatting.Indented)
    </MudText>
    
    <MudText >
            Select a ship using the following filters.
    </MudText>
    <MudGrid Justify="Justify.Center">
        <MudItem xs="3">
            <MudCheckBox @bind-Checked="@ViewModel.TierFilterChecked" Label="Tier" />
            <MudSelect T="string" Variant="Variant.Outlined" @bind-Value="@ViewModel.SelectedTier" Placeholder="I~XI" Disabled="@(!ViewModel.TierFilterChecked)">
                @foreach (var item in ViewModel.TierList)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
         
        </MudItem>
            
        <MudItem xs="3">
            <MudCheckBox @bind-Checked="@ViewModel.ClassFilterChecked" Label="Class" />
            <MudSelect T="ShipClass?" Variant="Variant.Outlined" @bind-Value="@ViewModel.SelectedClass" Placeholder="All" Disabled="@(!ViewModel.ClassFilterChecked)">
                @foreach (ShipClass? item in ViewModel.ClassList)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
         
        </MudItem>
            
        <MudItem xs="3">
            <MudCheckBox @bind-Checked="@ViewModel.NationFilterChecked" Label="Nation" />
            <MudSelect T="Nation?" Variant="Variant.Outlined" @bind-Value="@ViewModel.SelectedNation" Placeholder="All" Disabled="@(!ViewModel.NationFilterChecked)">
                @foreach (Nation? item in ViewModel.NationList)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>
          
        </MudItem>
            
        <MudItem xs="3">
            <MudCheckBox @bind-Checked="@ViewModel.TypeFilterChecked" Label="Type"/>
            <MudSelect T="ShipCategory?" Variant="Variant.Outlined" @bind-Value="@ViewModel.SelectedType" Placeholder="All" Disabled="@(!ViewModel.TypeFilterChecked)">
                @foreach (ShipCategory? item in ViewModel.TypeList)
                {
                    <MudSelectItem Value="@item">@item</MudSelectItem>
                }
            </MudSelect>            
          
        </MudItem>
        <MudItem xs="4">
            <MudAutocomplete T="KeyValuePair<string, ShipSummary>" ToStringFunc="@(pair => pair.Key)" SearchFunc="@Search" ResetValueOnEmptyText="true" Clearable="true" Placeholder="Select a ship..." Variant="Variant.Outlined" >
                <ItemTemplate Context="pair">
                    <MudText>@pair.Key</MudText>
                </ItemTemplate>
                <ItemSelectedTemplate Context="pair">
                                    <MudText Color="Color.Secondary">@pair.Key</MudText>
                </ItemSelectedTemplate>
            </MudAutocomplete>
                
            
            @* <MudTextField T="string" Variant="Variant.Outlined" Placeholder="Search ship..." @bind-Text="@ViewModel.InputText" Margin="Margin.Normal"/> *@
            
            @* <MudCard Style="max-height: 300px; overflow:auto" Outlined="true"> *@
            @*     <MudList Clickable="true"> *@
            @*         <MudVirtualize IsEnabled="true" Items="@ViewModel.SummaryList" Context="pair"> *@
            @*             <MudListItem Style="text-align: center" Value="@pair">@pair.Key</MudListItem> *@
            @*         </MudVirtualize> *@
            @*     </MudList> *@
            @* </MudCard> *@
        </MudItem>
    </MudGrid>
    <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@Test">Test</MudButton>
    <MudText>@data</MudText>

</MudContainer>

@code
{

    private string data = default!;

    private CompositeDisposable compositeDisposable = new();

    public Index()
    {
        this.WhenActivated(disposables =>
        {
            Console.WriteLine(ViewModel);
            compositeDisposable.DisposeWith(disposables);
           
        });
    }
    
    protected override void OnInitialized()
    {
        base.OnInitialized();
        var dict = AppData.ShipSummaryList.ToDictionary(ship => localizer[$"{ship.Index}_FULL"].Localization, ship => ship);
        Console.WriteLine(dict.First());
        ViewModel = new(false, dict);
        ViewModel?.SummaryList.ToObservableChangeSet().Do(_ => OnPropertyChanged(nameof(ViewModel))).Subscribe().DisposeWith(compositeDisposable);
    }

    void Test()
    {
        data = string.Join(" - ", ViewModel.SelectedTier, ViewModel.SelectedClass, ViewModel.SelectedNation, ViewModel.SelectedType, ViewModel.InputText);
    }

    private async Task<IEnumerable<KeyValuePair<string,ShipSummary>>> Search(string arg)
    {
        var items = ViewModel.FilteredShipNameDictionary.Where(pair => ViewModel.SummaryFilter(pair, arg)).ToList();
        return items;
    }
}
