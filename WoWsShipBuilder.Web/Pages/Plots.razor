@page "/plots"
@using WoWsShipBuilder.Web.Utility
@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Core.Services
@using WoWsShipBuilder.DataStructures
@using ChartJs.Blazor.LineChart
@using ChartJs.Blazor.Common.Axes
@using ChartJs.Blazor.Common.Enums
@using WoWsShipBuilder.Core.DataUI
@using WoWsShipBuilder.Web.Dialogs
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.Util
@inject NavigationManager navManager
@inject Localizer localizer
@inject IAppDataService webAppDataService
@inject IDialogService dialogService

<PageTitle>Plots</PageTitle>

<MudTabs Elevation="2" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Centered="true" Color="Color.Primary">
    <MudTabPanel Text="Dispersion Graph">
        <MudButton @onclick="GetShipDispAndBallisticData" Variant="Variant.Filled" Color="Color.Primary">
            Open Simple Dialog
        </MudButton>
        <MudContainer>
            <Chart Config="horizontalDispConfig" @ref="chart"></Chart>
            <Chart Config="verticalDispConfig" @ref="chart"></Chart>
        </MudContainer>
    </MudTabPanel>
    <MudTabPanel Text="Dispersion Plot">
    </MudTabPanel>
    <MudTabPanel Text="Ballistic Graph">
        <MudText>Content Three</MudText>
    </MudTabPanel>
</MudTabs>

@code 
{
    private LineConfig horizontalDispConfig = new();
    private LineConfig verticalDispConfig = new();
    private Chart chart = new();

    private int colorCounter;
    private static readonly System.Drawing.Color[] ChartColors = GenerateColors();
    private string[] shipIndexList = default!;
    private readonly Dictionary<string, (List<Point> horizontalDispSeries, List<Point> verticalDispSeries, Dictionary<double, Ballistic> ballisticSeries)> shipDispAndBallisticSeries = new();

    protected override void OnInitialized()
    {
        navManager.LocationChanged += HandleLocationChanged;
        navManager.TryGetQueryString("shipIndexes", out string shipIndexes);
        shipIndexList = shipIndexes.Split(",");
        CreateDispChartConfig();
    }

    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        navManager.TryGetQueryString("shipIndexes", out string shipIndexes);
        shipIndexList = shipIndexes.Split(",");
        StateHasChanged();
    }

    private async Task GetShipDispAndBallisticData()
    {
        List<ShellSelectionWrapper> shipList = new();
        List<Ship> ships = new();
        foreach (string shipIndex in shipIndexList)
        {
            var shipSummary = AppData.ShipSummaryList!.Single(x => x.Index.Equals(shipIndex));
            var ship = await webAppDataService.GetShipFromSummary(shipSummary);
            ships.Add(ship!);
            IEnumerable<string> shellIndexes;
            if (ship!.MainBatteryModuleList != null && ship.MainBatteryModuleList.Count > 0)
            {
                shellIndexes = ship.MainBatteryModuleList.SelectMany(turretModule => turretModule.Value.Guns.SelectMany(gun => gun.AmmoList)).Distinct();
            }
            else
            {
                shellIndexes = new List<string>();
            }
            ShellSelectionWrapper wrapper = new(shipIndex, shellIndexes);
            shipList.Add(wrapper);
        }
        var parameters = new DialogParameters
        {
            ["shipList"] = shipList,
        };
        var dialog = dialogService.Show<ShellSelectionDialog>("ShellSelectionDialog", parameters);
        var selectedShipList = await dialog.Result;
        if (selectedShipList is null || selectedShipList.Cancelled) return;

        foreach (var selectedShip in (IEnumerable<ShellSelectionWrapper>) selectedShipList.Data)
        {
            string shipName = Localizer.Instance[$"{selectedShip.ShipIndex}_FULL"].Localization;
            var ship = ships.Single(x => x.Index.Equals(selectedShip.ShipIndex));
            foreach ((string shellIndex, bool value) in selectedShip.ShellDictionary)
            {
                if (!value) continue;
                string shellName = Localizer.Instance[$"{shellIndex}"].Localization;
                var gun = ship.MainBatteryModuleList.Select(x => x.Value).First(x => x.Guns.First().AmmoList.Contains(shellIndex));
                var shell = await webAppDataService.GetProjectile<ArtilleryShell>(shellIndex);
                
                Dictionary<double, Ballistic> ballisticSeries = shell.ShellType == ShellType.AP ? BallisticHelper.CalculateBallistic(shell, (double) gun.MaxRange) : new();
                List<Point> horizontalDispSeries = CreateHorizontalDispersionSeries(gun.DispersionValues, (double) gun.MaxRange);
                List<Point> verticalDispSeries = CreateVerticalDispersionSeries(gun.DispersionValues, (double) gun.MaxRange);

                var name = $"{shipName} - {shellName}";
                shipDispAndBallisticSeries.Add(name, (horizontalDispSeries, verticalDispSeries, ballisticSeries));

                var lineColor = GetColor();
                CreateDispChartDataset(name, horizontalDispSeries, lineColor, horizontalDispConfig);
                CreateDispChartDataset(name, verticalDispSeries, lineColor, verticalDispConfig);
            }
        }
    }

    private void CreateDispChartConfig()
    {
        horizontalDispConfig = SetChartConfig("Horizontal Dispersion", "Range [km]", "Dispersion [m]");
        verticalDispConfig = SetChartConfig("Vertical Dispersion", "Range [km]", "Dispersion [m]");
    }

    private static LineConfig SetChartConfig(string title, string xLabel, string yLabel)
    {
        string? foregroundColor = ColorUtil.FromDrawingColor(System.Drawing.Color.DarkGray);
        string? gridColor = ColorUtil.FromDrawingColor(System.Drawing.Color.DimGray);
        return new()
        {
            Options = new()
            {
                Responsive = true,
                SpanGaps = true,
                Title = new()
                {
                    Display = true,
                    Text = title,
                    FontColor = foregroundColor,
                    FontSize = 30,
                },
                Tooltips = new()
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true,
                },
                Hover = new()
                {
                    Mode = InteractionMode.Nearest,
                    Intersect = true,
                },
                Legend = new()
                {
                    Labels = new()
                    {
                        FontColor = foregroundColor,
                    },
                },
                Scales = new()
                {
                    XAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new()
                            {
                                StepSize = 5,
                                Display = true,
                                FontColor = foregroundColor,
                            },
                            ScaleLabel = new()
                            {
                                LabelString = xLabel,
                                FontColor = foregroundColor,
                                Display = true,
                            },
                            GridLines = new()
                            {
                                ZeroLineColor = foregroundColor,
                                Display = true,
                                DrawTicks = true,
                                TickMarkLength = 5,
                                DrawBorder = true,
                                ZeroLineWidth = 3,
                                DrawOnChartArea = true,
                                Color = gridColor,
                                BorderDash = new double[]{5, 5},
                            },
                        },
                    },
                    YAxes = new List<CartesianAxis>
                    {
                        new LinearCartesianAxis
                        {
                            Ticks = new()
                            {
                                StepSize = 25,
                                Display = true,
                                FontColor = foregroundColor,
                            },
                            ScaleLabel = new()
                            {
                                LabelString = yLabel,
                                FontColor = foregroundColor,
                                Display = true,
                            },
                            GridLines = new()
                            {
                                ZeroLineColor = foregroundColor,
                                Display = true,
                                DrawTicks = true,
                                TickMarkLength = 5,
                                DrawBorder = true,
                                ZeroLineWidth = 3,
                                DrawOnChartArea = true,
                                Color = gridColor,
                                BorderDash = new double[]{5, 5},
                            },
                        },
                    },
                },
            },
        };
    }

    private static void CreateDispChartDataset(string name, IEnumerable<Point> data, System.Drawing.Color chartLineColor, LineConfig chartConfig)
    {
        IDataset<Point> dataset = new LineDataset<Point>(data)
        {
            Label = name,
            BackgroundColor = ColorUtil.FromDrawingColor(chartLineColor),
            BorderColor = ColorUtil.FromDrawingColor(chartLineColor),
            Fill = FillingMode.Disabled,
            PointRadius = 0,
            CubicInterpolationMode = CubicInterpolationMode.Monotone,
        };
        chartConfig.Data.Datasets.Add(dataset);
    }

    /// <summary>
    /// Create the series for the horizontal dispersion.
    /// </summary>
    /// <param name="dispersion"><see cref="Dispersion"/> data of the gun.</param>
    /// <param name="maxRange">Max range of the gun.</param>
    /// <returns>The horizontal dispersion series for the given parameter.</returns>
    private static List<Point> CreateHorizontalDispersionSeries(Dispersion dispersion, double maxRange)
    {
        return CreateFunctionSeries(range => dispersion.CalculateHorizontalDispersion(range * 1000), 0, (maxRange * 1.5) / 1000, 0.01);
    }

    /// <summary>
    /// Create the series for the vertical dispersion.
    /// </summary>
    /// <param name="dispersion"><see cref="Dispersion"/> data of the gun.</param>
    /// <param name="maxRange">Max range of the gun.</param>
    /// <returns>The vertical dispersion series for the given parameter.</returns>
    private static List<Point> CreateVerticalDispersionSeries(Dispersion dispersion, double maxRange)
    {
        return CreateFunctionSeries(range => dispersion.CalculateVerticalDispersion(maxRange, range * 1000), 0, (maxRange * 1.5) / 1000, 0.01);
    }

    private System.Drawing.Color GetColor()
    {
        if (colorCounter > 14)
        {
            colorCounter = 0;
        }
        var color = ChartColors[colorCounter];
        colorCounter++;
        return color;
    }

    private static System.Drawing.Color[] GenerateColors()
    {
        var colors = new[]
        {
            System.Drawing.ColorTranslator.FromHtml("#ef6fcc"),
            System.Drawing.ColorTranslator.FromHtml("#62ce75"),
            System.Drawing.ColorTranslator.FromHtml("#f53a4c"),
            System.Drawing.ColorTranslator.FromHtml("#11ccdc"),
            System.Drawing.ColorTranslator.FromHtml("#9166aa"),
            System.Drawing.ColorTranslator.FromHtml("#a4c28a"),
            System.Drawing.ColorTranslator.FromHtml("#c15734"),
            System.Drawing.ColorTranslator.FromHtml("#faa566"),
            System.Drawing.ColorTranslator.FromHtml("#6c7b66"),
            System.Drawing.ColorTranslator.FromHtml("#eda4ba"),
            System.Drawing.ColorTranslator.FromHtml("#2d6df9"),
            System.Drawing.ColorTranslator.FromHtml("#f62ef3"),
            System.Drawing.ColorTranslator.FromHtml("#957206"),
            System.Drawing.ColorTranslator.FromHtml("#a45dff"),
        };
        return colors;
    }
    
    /// <summary>
    /// Create data series using a function <code>f(x)</code>.
    /// </summary>
    /// <param name="f">The function <code>f(x)</code>.</param>
    /// <param name="x0">The start x value.</param>
    /// <param name="x1">The end x value.</param>
    /// <param name="dx">The increment in x.</param>
    /// <returns>A <see cref="List{Point}"/> of <see cref="Point"/></returns>
    private static List<Point> CreateFunctionSeries(Func<double, double> f, double x0, double x1, double dx)
    {
        List<Point> dispSeries = new();
        for (double x = x0; x <= x1 + dx * 0.5; x += dx)
            dispSeries.Add(new(x, f(x)));
        return dispSeries;
    }
}