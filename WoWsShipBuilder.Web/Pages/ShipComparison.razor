@page "/shipComparison"
@using WoWsShipBuilder.ViewModels.Other
@using WoWsShipBuilder.Core.Extensions
@using WoWsShipBuilder.Core.Services
@using WoWsShipBuilder.ViewModels.Helper
@using WoWsShipBuilder.Web.Dialogs
@using System.Globalization
@using WoWsShipBuilder.Core.Data
@using WoWsShipBuilder.Web.Utility
@using static WoWsShipBuilder.Web.Components.ShipComparisonSectionsRenderFragments.MainBatteryFragment

@inherits ReactiveComponentBase<ShipComparisonViewModel>

@inject IHostEnvironment Environment
@inject ILocalizer Localizer
@inject IAppDataService AppDataService
@inject ISnackbar Snackbar

<PageTitle>WoWs ShipBuilder: Ship Comparing</PageTitle>

@if (ViewModel is not null)
    {
        <MudStack Class="mb-3 mt-3">
            <MudPaper Outlined="true" Square="true" Class="pa-3" Style="width: 100%">
                <MudStack Row="true">
                    <MudText GutterBottom="true" Style="font-size: large">
                        Tier
                    </MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Info" Class="ml-auto" DisableElevation="true" Size="Size.Small" OnClick="@(() => ViewModel.ToggleAllTiers(true))">
                        All
                    </MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Info" Class="mr-0" DisableElevation="true" Size="Size.Small" OnClick="@(() => ViewModel.ToggleAllTiers(false))">
                        None
                    </MudButton>
                </MudStack>
                <MudButtonGroup OverrideStyles="false" Class="gap-1" Style="flex-wrap: wrap" Size="Size.Small">
                    @for(var i = 1; i <= 11; i++)
                    {
                        int tier = i;
                        bool isSelected = ViewModel.SelectedTiers.Contains(tier);
                        <MudButton DisableElevation="true" Variant="Helpers.GetVariantFromBool(isSelected, Variant.Filled, Variant.Outlined)" Color="Helpers.GetColorFromBool(isSelected, Color.Primary, Color.Secondary)" OnClick="@(() => ViewModel.ToggleTierSelection(tier))">
                            @tier.ToTierString()
                        </MudButton>
                    }
                </MudButtonGroup>
                <MudStack Row="true" Class="mt-3">
                    <MudText GutterBottom="true" Style="font-size: large">
                        Class
                    </MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Info" Class="ml-auto" DisableElevation="true" Size="Size.Small" OnClick="@(() => ViewModel.ToggleAllClasses(true))">
                        All
                    </MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Info" Class="mr-0" DisableElevation="true" Size="Size.Small" OnClick="@(() => ViewModel.ToggleAllClasses(false))">
                        None
                    </MudButton>
                </MudStack>
                <MudButtonGroup OverrideStyles="false" Class="gap-1" Style="flex-wrap: wrap" Size="Size.Small">
                    @foreach (var shipClass in ViewModel!.AvailableClasses)
                    {
                        bool isSelected = ViewModel.SelectedClasses.Contains(shipClass);
                        <MudButton DisableElevation="true" Variant="Helpers.GetVariantFromBool(isSelected, Variant.Filled, Variant.Outlined)" Color="Helpers.GetColorFromBool(isSelected, Color.Primary, Color.Secondary)" OnClick="@(() => ViewModel.ToggleClassSelection(shipClass))">
                            @Localizer.GetAppLocalization(shipClass.ToString()).Localization
                        </MudButton>
                    }
                </MudButtonGroup>
                <MudStack Row="true" Class="mt-3">
                    <MudText GutterBottom="true" Style="font-size: large">
                        Nation
                    </MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Info" Class="ml-auto" DisableElevation="true" Size="Size.Small" OnClick="@(() => ViewModel.ToggleAllNations(true))">
                        All
                    </MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Info" Class="mr-0" DisableElevation="true" Size="Size.Small" OnClick="@(() => ViewModel.ToggleAllNations(false))">
                        None
                    </MudButton>
                </MudStack>
                <MudButtonGroup OverrideStyles="false" Class="gap-1" Style="flex-wrap: wrap" Size="Size.Small">
                    @foreach (var nation in ViewModel!.AvailableNations)
                    {
                        bool isSelected = ViewModel.SelectedNations.Contains(nation);
                        <MudButton DisableElevation="true" Variant="Helpers.GetVariantFromBool(isSelected, Variant.Filled, Variant.Outlined)" Color="Helpers.GetColorFromBool(isSelected, Color.Primary, Color.Secondary)" OnClick="@(() => ViewModel.ToggleNationSelection(nation))">
                            @Localizer.GetAppLocalization(nation.ToString()).Localization
                        </MudButton>
                    }
                </MudButtonGroup>
                <MudStack Row="true" Class="mt-3">
                    <MudText GutterBottom="true" Style="font-size: large">
                        Category
                    </MudText>
                    <MudButton Variant="Variant.Text" Color="Color.Info" Class="ml-auto" DisableElevation="true" Size="Size.Small" OnClick="@(() => ViewModel.ToggleAllCategories(true))">
                        All
                    </MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Info" Class="mr-0" DisableElevation="true" Size="Size.Small" OnClick="@(() => ViewModel.ToggleAllCategories(false))">
                        None
                    </MudButton>
                </MudStack>
                <MudButtonGroup OverrideStyles="false" Class="gap-1" Style="flex-wrap: wrap" Size="Size.Small">
                    @foreach (var category in ViewModel!.AvailableShipCategories)
                    {
                        bool isSelected = ViewModel.SelectedCategories.Contains(category);
                        <MudButton DisableElevation="true" Variant="Helpers.GetVariantFromBool(isSelected, Variant.Filled, Variant.Outlined)" Color="Helpers.GetColorFromBool(isSelected, Color.Primary, Color.Secondary)" OnClick="@(() => ViewModel.ToggleCategorySelection(category))">
                            @Localizer.GetAppLocalization(category.ToString()).Localization
                        </MudButton>
                    }
                </MudButtonGroup>
            </MudPaper>
            <MudStack Style="width: 100%">
                <MudTextField AutoFocus T="string" Adornment="Adornment.Start" Placeholder="Type name..." AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Variant="Variant.Outlined" Label="Search & Pin Ship" @bind-Text="@ViewModel.SearchShip" Immediate="true" DebounceInterval="150" Margin="Margin.Normal"/>
                @if (!string.IsNullOrEmpty(ViewModel.SearchShip))
                {
                    <MudPaper Style="max-height: 300px; overflow:auto" Outlined="true">
                        <MudList Clickable="true" SelectedValueChanged="AddSearchedShip">
                            <MudVirtualize IsEnabled="true" Items="@ViewModel.SearchedShips.OrderBy(x => Localizer.GetGameLocalization(x.Index).Localization).ToList()" Context="ship">
                                <MudListItem Style="text-align: center" Value="@ship">
                                    <MudText Color="Color.Secondary">
                                        @(Localizer.GetGameLocalization(ship.Index).Localization)
                                    </MudText>
                                </MudListItem>
                            </MudVirtualize>
                        </MudList>
                    </MudPaper>
                }
                <MudStack Row>
                    <MudButton FullWidth="true" DisableElevation="true" Variant="Helpers.GetVariantFromBool(ViewModel.ShowPinnedShipsOnly, Variant.Filled, Variant.Outlined)" Color="Helpers.GetColorFromBool(ViewModel.ShowPinnedShipsOnly, Color.Primary, Color.Secondary)" OnClick="ToggleShowPinnedShipOnly">
                        Display only pinned ships
                    </MudButton>
                    <MudButton FullWidth="true" DisableElevation="true" Variant="Helpers.GetVariantFromBool(ViewModel.UseUpgradedModules, Variant.Filled, Variant.Outlined)" Color="Helpers.GetColorFromBool(ViewModel.UseUpgradedModules, Color.Primary, Color.Secondary)" OnClick="ToggleUpgradedModules">
                        Use upgraded modules
                    </MudButton>
                </MudStack>
                <MudStack Row>
                    <MudButton FullWidth="true" DisableElevation="true" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="ViewModel.SelectAllDisplayedShips" Disabled="@(ViewModel.GetShipsToBeDisplayedList().Count == 0)">
                        @GetSelectAllButtonText()
                    </MudButton>
                    <MudButton FullWidth="true" DisableElevation="true" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="ViewModel.PinAllDisplayedShips" Disabled="@(ViewModel.GetShipsToBeDisplayedList().Count == 0)">
                        @GetPinAllButtonText()
                    </MudButton>
                    <MudButton FullWidth="true" DisableElevation="true" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="ViewModel.DuplicateSelectedShips" Disabled="@(ViewModel.SelectedShipList.Count == 0)">
                        Duplicate selected ships
                    </MudButton>
                    <MudButton FullWidth="true" DisableElevation="true" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="EditBuilds" Disabled="@(ViewModel.SelectedShipList.Count == 0)">
                        Edit selected ships builds
                    </MudButton>
                    <MudButton FullWidth="true" DisableElevation="true" Variant="Variant.Outlined" Color="Color.Secondary" OnClick="RemoveBuilds" Disabled="@(ViewModel.SelectedShipList.Count == 0)">
                        Remove selected ships builds
                    </MudButton>
                </MudStack>
                <MudPaper Outlined="true" Square="true" Class="pa-3" Style="width: 100%">
                    <MudText GutterBottom="true" Style="font-size: large">
                        Section
                    </MudText>
                    <MudButtonGroup OverrideStyles="false" Class="gap-1" Style="flex-wrap: wrap" Size="Size.Small">
                        @foreach (var dataSection in Enum.GetValues(typeof(ShipComparisonViewModel.DataSections)).Cast<ShipComparisonViewModel.DataSections>())
                        {
                            bool isSelected = ViewModel.SelectedDataSection.Equals(dataSection);
                            <MudButton DisableElevation="true" Variant="Helpers.GetVariantFromBool(isSelected, Variant.Filled, Variant.Outlined)" Color="Helpers.GetColorFromBool(isSelected, Color.Primary, Color.Secondary)" OnClick="@(() => ViewModel.ToggleDataSection(dataSection))">
                                @dataSection.ToString()
                            </MudButton>
                        }
                    </MudButtonGroup>
                </MudPaper>
            </MudStack>
        </MudStack>
        <MudDataGrid ID="table" T="ShipComparisonDataWrapper" Items="@ViewModel.GetShipsToBeDisplayedList()"  Groupable="false" SortMode="SortMode.Multiple" Filterable="false" ShowFilterIcons="true" FilterMode="DataGridFilterMode.Simple" Hover Outlined Bordered Dense Breakpoint="Breakpoint.None" Virtualize QuickFilter="Search" ColumnResizeMode="ResizeMode.Column" ShowColumnOptions="false">
            <ToolBarContent>
                <MudTextField @bind-Value="ViewModel.SearchString" Placeholder="@Localizer.GetAppLocalization(nameof(Translation.ShipSelectionWindow_SearchShip)).Localization" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-n3" Style="alignment: right" Clearable="true" Immediate="true" DebounceInterval="150"/>
                <div style="width: 45%">
                    <MudSpacer/>
                </div>
                <MudDataGridPager T="ShipComparisonDataWrapper" PageSizeOptions="new[] {25, 50, 75, 100}" Class="mt-n3"/>
            </ToolBarContent>
            <Columns>
                <Column T="ShipComparisonDataWrapper" Field="Ship" Title="Select" SortBy="@(x => ViewModel.ContainsWrapper(x, ViewModel.SelectedShipList))">
                    <CellTemplate>
                        <MudIcon Icon="@IsShipSelectedIcon(context.Item)" Size="Size.Medium" Color="@IsShipSelectedColor(context.Item)" onclick="@(() => AddSelectedShip(context.Item))" ViewBox="0 0 24 24"/>
                    </CellTemplate>
                </Column>
                <Column T="ShipComparisonDataWrapper" Field="ShipDataContainer" Title="Pin" SortBy="@(x => ViewModel.ContainsWrapper(x, ViewModel.PinnedShipList))">
                    <CellTemplate>
                        <MudIcon Icon="@IsShipPinnedIcon(context.Item)" Size="Size.Medium" Color="@IsShipPinnedColor(context.Item)" onclick="@(() => AddPinnedShip(context.Item))" ViewBox="0 0 24 24"/>
                    </CellTemplate>
                </Column>
                <Column T="ShipComparisonDataWrapper" Field="ShipNation" Title="Nation" SortBy="@(x => x.Ship.ShipNation.ToString())">
                    <CellTemplate>
                        <MudImage Src="@(Helpers.GetNationFlag(Environment, context.Item.ShipNation, context.Item.Ship.Index))" Height="37"/>
                    </CellTemplate>
                </Column>
                <Column T="ShipComparisonDataWrapper" Field="ShipClass" Title="Class" SortBy="@(x => x.Ship.ShipClass.ToString())">
                    <CellTemplate>
                        <MudIcon Icon="@(Helpers.GetIconFromClass(context.Item.ShipClass, context.Item.ShipCategory))" Size="Size.Medium" ViewBox="-1 -3 24 10"/>
                    </CellTemplate>
                </Column>
                <Column T="ShipComparisonDataWrapper" Field="ShipTier" Title="Tier">
                    <CellTemplate>
                        @context.Item.ShipTier.ToTierString()
                    </CellTemplate>
                </Column>
                <Column T="ShipComparisonDataWrapper" Field="Build" Title="Image" SortBy="@(x => Localizer.GetGameLocalization(x.ShipIndex).Localization)">
                    <CellTemplate>
                        <MudImage Src="@(BaseAddress + context.Item.ShipIndex + ".png")" Height="37" ObjectPosition="ObjectPosition.Center"/>
                    </CellTemplate>
                </Column>
                <Column T="ShipComparisonDataWrapper" Field="ShipIndex" Title="Name" SortBy="@(x => Localizer.GetGameLocalization(x.ShipIndex).Localization)" InitialDirection="SortDirection.Ascending">
                    <CellTemplate>
                        @Localizer.GetGameLocalization(context.Item.ShipIndex).Localization
                    </CellTemplate>
                </Column>
                <Column T="ShipComparisonDataWrapper" Field="BuildName" Title="Build">
                    <CellTemplate>
                        @(string.IsNullOrEmpty(context.Item.BuildName) ? ShipComparisonViewModel.DefaultBuildName : context.Item.BuildName)
                    </CellTemplate>
                </Column>
                @MainBatteryDataFragment((ViewModel.SelectedDataSection, Localizer))
            </Columns>
            <PagerContent>
                <MudDataGridPager T="ShipComparisonDataWrapper" PageSizeOptions="new[] {25, 50, 75, 100}"/>
            </PagerContent>
            <NoRecordsContent>
                <MudText>No matching ships found</MudText>
            </NoRecordsContent>
        </MudDataGrid>
        <BuildConfigurationDialogHelper @ref="buildConfigurationHelper" ShipBuildContainers="@ViewModel.SelectedShipList.Select(x => new ShipBuildContainer(x.Ship, x.Build, x.Id, null, false, x.ShipDataContainer, null)).OrderBy(x => Localizer.GetGameLocalization(x.Ship.Index).Localization).ToList()" MaxWidth="MaxWidth.Large" FullWidth NoHeader/>
        <MudScrollToTop TopOffset="100" Style="z-index:2001" Visible="@(!isDialogOpen)">
            <MudFab Color="Color.Info" StartIcon="@Icons.Filled.KeyboardDoubleArrowUp"/>
        </MudScrollToTop>
    }

@code {
    
     private const string BaseAddress = @"https://cdn.wowssb.com/images/individual/";
     
     private BuildConfigurationDialogHelper buildConfigurationHelper = default!;

     private bool isDialogOpen;

     protected override async Task OnInitializedAsync()
     {
         await base.OnInitializedAsync();
         ViewModel = new(AppDataService, Localizer);
     }

     private Color IsShipPinnedColor(ShipComparisonDataWrapper wrapper)
    {
        return ViewModel!.ContainsWrapper(wrapper, ViewModel.PinnedShipList) ? Color.Info : Color.Default;
    }

    private string IsShipPinnedIcon(ShipComparisonDataWrapper wrapper)
    {
        return ViewModel!.ContainsWrapper(wrapper, ViewModel.PinnedShipList) ? Icons.Filled.PushPin : Icons.Outlined.PushPin;
    }
    
    private Color IsShipSelectedColor(ShipComparisonDataWrapper wrapper)
    {
        return ViewModel!.ContainsWrapper(wrapper, ViewModel.SelectedShipList) ? Color.Info : Color.Default;
    }

    private string IsShipSelectedIcon(ShipComparisonDataWrapper wrapper)
    {
        return ViewModel!.ContainsWrapper(wrapper, ViewModel.SelectedShipList) ? Icons.Filled.CheckBox : Icons.Filled.CheckBoxOutlineBlank;
    }

    private async Task EditBuilds()
    {
        if (ViewModel!.SelectedShipList.Count == 0)
        {
            Snackbar.Add("No ship selected.", Severity.Warning);
            return;   
        }
        
        isDialogOpen = true;
        IEnumerable<ShipBuildContainer>? results = await buildConfigurationHelper.ShowDialogAsync();
        isDialogOpen = false;
        if (results is not null)
        {
            List<ShipComparisonDataWrapper> list = results.Select(x => new ShipComparisonDataWrapper(x.Ship, x.ShipDataContainer!, x.Build, x.Id)).ToList();
            ViewModel!.EditBuilds(list);   
        }
    }

    private async Task RemoveBuilds()
    {
        if (ViewModel!.SelectedShipList.Count == 0)
        {
            Snackbar.Add("No ship selected.", Severity.Warning);
            return;   
        }
        
        List<ShipComparisonDataWrapper> warnings = await ViewModel!.RemoveBuilds();
        if (warnings.Count > 0)
        {
            warnings.ForEach(x => Snackbar.Add($"The build on the ship < {Localizer.GetGameLocalization(x.ShipIndex).Localization} > has been removed but at least one instance of this ship must remain.", Severity.Warning));
        }
    }

    private async Task AddPinnedShip(ShipComparisonDataWrapper wrapper)
    {
        await ViewModel!.AddPinnedShip(wrapper);
        StateHasChanged();
    }
     
    private void AddSelectedShip(ShipComparisonDataWrapper wrapper)
    {
        ViewModel!.AddSelectedShip(wrapper);
        StateHasChanged();
    }

    private void ToggleShowPinnedShipOnly()
    {
        ViewModel!.ToggleShowPinnedShipOnly();
        StateHasChanged();
    }

    private async Task ToggleUpgradedModules()
    {
        await ViewModel!.ToggleUpgradedModules();
        StateHasChanged();
    }

    private void AddSearchedShip(object? obj)
    {
        ViewModel!.AddShip(obj);
        StateHasChanged();
    }

    private string GetSelectAllButtonText()
    {
        return ViewModel!.SelectAllShips ? "Unselect All" : "Select All";
    }

    private string GetPinAllButtonText()
    {
        return ViewModel!.PinAllShips ? "Unpin All" : "Pin All";
    }

    // quick filter - filter globally across multiple columns with the same input
    private Func<ShipComparisonDataWrapper, bool> Search => x =>
    {
        if (string.IsNullOrWhiteSpace(ViewModel!.SearchString))
            return true;

        return CultureInfo.CurrentCulture.CompareInfo.IndexOf(Localizer.GetGameLocalization(x.Ship.Index).Localization, ViewModel!.SearchString, CompareOptions.IgnoreNonSpace | CompareOptions.IgnoreCase) != -1; //TODO change this search method for the server
    };
     
}