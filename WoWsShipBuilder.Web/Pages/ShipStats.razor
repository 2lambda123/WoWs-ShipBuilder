@page "/ship"

@using WoWsShipBuilder.Web.Utility
@using DynamicData
@using WoWsShipBuilder.Web.Dialogs

@inject NavigationManager NavManager
@inject ILocalizer Localizer
@inject IDialogService DialogService

<PageTitle>Ship stats</PageTitle>

@* HideSlider is set to true because of a bug. see https://github.com/MudBlazor/MudBlazor/issues/4742*@
<MudDynamicTabs Color="Color.Primary" Position="Position.Top" HideSlider KeepPanelsAlive AddTab="@OpenAddDialogAsync" CloseTab="@RemoveTab" @ref="mudTabs" Elevation="2" PanelClass="pa-6" Outlined Border Class="pt-3">
    @foreach (var shipIndex in shipIndexes)
    {
        <MudTabPanel Style="@(GetStyle(shipIndex))" Text="@Localizer.GetGameLocalization(shipIndex + "_FULL").Localization" Tag="@shipIndex" ID="@shipIndex" @key="@indexIdMapper[shipIndex]">
            <ShipStatsContainer ShipIndex="@shipIndex" OnShipChanged="@OnShipIndexChanged"/>
        </MudTabPanel>
    }
</MudDynamicTabs>
<MudScrollToTop TopOffset="100" Style="z-index:2001">
    <MudFab Color="Color.Info" StartIcon="@Icons.Filled.KeyboardDoubleArrowUp"/>
</MudScrollToTop>

@code {

    private MudTabs mudTabs = default!;

    private readonly List<string> shipIndexes = new();

    private bool updateTab;

    private string selectedTabId = string.Empty;

    private int idCount;

    private readonly Dictionary<string, string> indexIdMapper = new();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        NavManager.TryGetQueryString("shipIndexes", out string ships);
        if (!string.IsNullOrWhiteSpace(ships))
        {
            AddNewIndexes(ships.Split(","));
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!updateTab) return;
        mudTabs.ActivatePanel(selectedTabId, true);
        updateTab = false;
        StateHasChanged();
    }

    private bool OnShipIndexChanged(string? oldIndex, string newIndex)
    {
        var update = false;
        if (!indexIdMapper.ContainsKey(newIndex))
        {
            if (oldIndex is not null)
            {
                shipIndexes.Replace(oldIndex, newIndex);
                indexIdMapper[newIndex] = indexIdMapper[oldIndex];
                indexIdMapper.Remove(oldIndex);
                update = true;
            }
            else
            {
                shipIndexes.Add(newIndex);
                indexIdMapper[newIndex] = (idCount++).ToString();
            }
            UpdateUrl();
        }

        selectedTabId = newIndex;
        updateTab = true;
        StateHasChanged();
        return update;
    }

    private void RemoveTab(MudTabPanel panel)
    {
        string shipIndex = (string)panel.Tag;
        int index = shipIndexes.IndexOf(shipIndex);
        shipIndexes.Remove(shipIndex);
        indexIdMapper.Remove(shipIndex);

        if (mudTabs.ActivePanel.ID.Equals(panel.ID))
        {
    // If shipIndexes contains more element than index (meaning, index is not out of bound for the shipIndexes list), then we select the ship at the same index.
    // We do it with the ID because using the index makes the tab appear as blank ("display: none" in the style).
    // If the index is out of bound, we check if the shipIndexes has any element, in which case we take the last element of the list, since it means we removed the old last element.
    // Finally, if the list is empty, we check if the new ship tab is present. If it is, we select that one, otherwise we do nothing.
            if (shipIndexes.Count > index && index != -1)
            {
                mudTabs.ActivatePanel(shipIndexes[index]);
            }
            else if (shipIndexes.Count > 0)
            {
                mudTabs.ActivatePanel(shipIndexes.Last());
            }
        }
        UpdateUrl();
    }

    private async Task OpenAddDialogAsync()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            CloseOnEscapeKey = true,
            DisableBackdropClick = false,
        };
        var result = await DialogService.Show<ShipSelectionDialog>("Add ships", options).Result;
        if (!result.Cancelled && result.Data is List<string> newIndexes)
        {
            AddNewIndexes(newIndexes);
            selectedTabId = newIndexes.FirstOrDefault() ?? selectedTabId;
            updateTab = true;

            UpdateUrl();
            StateHasChanged();
        }
    }

    private void AddNewIndexes(IEnumerable<string> indexList)
    {
        List<string> newIndexes = indexList.ToList();
        newIndexes.Remove(shipIndexes);
        shipIndexes.AddRange(newIndexes);
        foreach (string newIndex in newIndexes)
        {
            indexIdMapper[newIndex] = (idCount++).ToString();
        }
    }

    private void UpdateUrl()
    {
        var shipsString = string.Join(",", shipIndexes);
        NavManager.NavigateTo($"/ship?shipIndexes={shipsString}");
    }

    private string GetStyle(string shipIndex)
    {
        if (mudTabs.ActivePanel is not null && mudTabs.ActivePanel.Tag.Equals(shipIndex))
        {
            return " background-color: rgba(0, 0, 0, 0.4);";
        }
        return string.Empty;
    }

}