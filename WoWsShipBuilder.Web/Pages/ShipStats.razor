@page "/ship"

@using WoWsShipBuilder.Web.Utility
@using DynamicData
@using WoWsShipBuilder.Core.Builds
@using WoWsShipBuilder.Web.Dialogs
@using WoWsShipBuilder.Web.Services

@inject NavigationManager NavManager
@inject ILocalizer Localizer
@inject IDialogService DialogService
@inject BuildHelper BuildHelper

<PageTitle>Ship stats</PageTitle>

<MudBreakpointProvider>
    @* HideSlider is set to true because of an issue in MudBlazor. see https://github.com/MudBlazor/MudBlazor/issues/4742*@
    <MudDynamicTabs Color="Color.Primary" Position="Position.Top" HideSlider CloseTab="@RemoveTab" @ref="mudTabs" Elevation="2" PanelClass="px-md-6 py-6" Outlined Border Class="pt-3">
        <ChildContent>
            @foreach (var container in shipContainers)
            {
                <MudTabPanel Style="@(GetStyle(container.Id))" Text="@Localizer.GetGameLocalization(container.ShipIndex + "_FULL").Localization" Tag="@container.Id" ID="@container.Id" @key="@container.Id">
                    <ShipStatsContainer CacheService="@cacheService" CurrentTabId="container.Id" ShipIndex="@container.ShipIndex" OnShipChanged="@OnShipIndexChanged" BuildString="@container.BuildString"/>
                </MudTabPanel>
            }
        </ChildContent>
        <Header>
            <MudStack Row>
                <MudDivider Vertical/>
                <MudTooltip Text="@Localizer.GetAppLocalization(Translation.DispersionGraphWindow_AddShip).Localization" Arrow Delay="350">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="@OpenAddDialogAsync" Color="Color.Secondary"/>
                </MudTooltip>
                <MudTooltip Text="@Localizer.GetAppLocalization(Translation.ShipStats_ShowInBallisticCharts).Localization" Arrow Delay="350">
                    <MudIconButton OnClick="@OpenBallisticCharts" Color="Color.Secondary" Style="width: 48px; height: 48px">
                        <MudIcon Icon="@DispersionAndBallisticChartsPath" ViewBox="-4 -7 24 24"/>
                    </MudIconButton>
                </MudTooltip>
                <MudTooltip Text="@Localizer.GetAppLocalization(Translation.ShipStats_ShowInAccelerationCharts).Localization" Arrow Delay="350">
                    <MudIconButton Icon="@Icons.Material.Filled.Speed" OnClick="@OpenAccelerationCharts" Color="Color.Secondary"/>
                </MudTooltip>
            </MudStack>
        </Header>
    </MudDynamicTabs>
</MudBreakpointProvider>
<MudScrollToTop TopOffset="100" Style="z-index:2001">
    <MudFab Color="Color.Info" StartIcon="@Icons.Material.Filled.KeyboardDoubleArrowUp"/>
</MudScrollToTop>

@code {
    
    private const string DispersionAndBallisticChartsPath = @"<path d=""M1.5 1.75V13.5h13.75a.75.75 0 0 1 0 1.5H.75a.75.75 0 0 1-.75-.75V1.75a.75.75 0 0 1 1.5 0Zm14.28 2.53-5.25 5.25a.75.75 0 0 1-1.06 0L7 7.06 4.28 9.78a.751.751 0 0 1-1.042-.018.751.751 0 0 1-.018-1.042l3.25-3.25a.75.75 0 0 1 1.06 0L10 7.94l4.72-4.72a.751.751 0 0 1 1.042.018.751.751 0 0 1 .018 1.042Z"" stroke-width="".053058""/>";

    private MudTabs mudTabs = default!;

    private readonly List<ShipSelector.ShipSelectorContainer> shipContainers = new();

    private readonly VmCacheService cacheService = new();

    private string shipIndexesFromUrl = default!;

    private string shipBuildFromUrl = default!;

    private bool updateTab;

    private Guid selectedTabId;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        NavManager.TryGetQueryString("shipIndexes", out shipIndexesFromUrl);
        NavManager.TryGetQueryString("build", out shipBuildFromUrl);
        if (!string.IsNullOrEmpty(shipIndexesFromUrl))
        {
            var buildContainers = await BuildHelper.RetrieveBuildContainers();
            List<BuildHelper.BuildHelperContainer>? buildList;
            if (!string.IsNullOrWhiteSpace(shipBuildFromUrl))
            {
                buildList = new() { new(shipIndexesFromUrl, shipBuildFromUrl, null, null) };
            }
            else if (buildContainers is not null)
            {
                buildList = buildContainers;
            }
            else
            {
                buildList = null;
            }
            
            var indexes = shipIndexesFromUrl.Split(",").ToList();
            AddNewIndexes(indexes, buildList);
        }
        UpdateUrl();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (!updateTab) return;
        mudTabs.ActivatePanel(selectedTabId, true);
        updateTab = false;
        StateHasChanged();
    }

    private bool OnShipIndexChanged(Guid? oldId, string newShipIndex)
    {
        var update = false;
        if (oldId is not null)
        {
            var ship = shipContainers.First(x => x.Id.Equals(oldId));
            shipContainers.Replace(ship, ship with { ShipIndex = newShipIndex, BuildString = null });
            selectedTabId = (Guid) oldId;
            update = true;
        }
        else
        {
            AddNewIndexes(new() { newShipIndex }, null);
            selectedTabId = shipContainers.Last().Id;
        }
        UpdateUrl();
        updateTab = true;
        StateHasChanged();
        return update;
    }

    private void RemoveTab(MudTabPanel panel)
    {
        var id = (Guid) panel.Tag;
        var ship = shipContainers.First(x => x.Id.Equals(id));
        int index = shipContainers.IndexOf(ship);
        shipContainers.Remove(ship);
        cacheService.RemoveEntry(id);

        if (mudTabs.ActivePanel.ID.Equals(panel.ID))
        {
            // If shipIndexes contains more element than index (meaning, index is not out of bound for the shipIndexes list), then we select the ship at the same index.
            // We do it with the ID because using the index makes the tab appear as blank ("display: none" in the style).
            // If the index is out of bound, we check if the shipIndexes has any element, in which case we take the last element of the list, since it means we removed the old last element.
            // Finally, if the list is empty, we check if the new ship tab is present. If it is, we select that one, otherwise we do nothing.
            if (shipContainers.Count > index && index != -1)
            {
                mudTabs.ActivatePanel(shipContainers[index].Id);
            }
            else if (shipContainers.Count > 0)
            {
                mudTabs.ActivatePanel(shipContainers.Last().Id);
            }
        }
        UpdateUrl();
    }

    private async Task OpenAddDialogAsync()
    {
        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.Large,
            CloseOnEscapeKey = true,
            DisableBackdropClick = false,
        };
        var result = await (await DialogService.ShowAsync<ShipSelectionDialog>("Add ships", options)).Result;
        if (!result.Canceled && result.Data is List<ShipSelector.ShipSelectorContainer> { Count: > 0 } newShips)
        {
            AddNewIndexes(new() { newShips.First().ShipIndex }, new() { new(newShips.First().ShipIndex, newShips.First().BuildString ?? string.Empty, null, null) });
            selectedTabId = shipContainers.Last().Id;
            AddNewIndexes(newShips.Skip(1).Select(x => x.ShipIndex).ToList(), newShips.Skip(1).Select(x => new BuildHelper.BuildHelperContainer(x.ShipIndex, x.BuildString ?? string.Empty, null, null)).ToList());
            updateTab = true;

            UpdateUrl();
            StateHasChanged();
        }
    }

    private void AddNewIndexes(List<string> indexList, List<BuildHelper.BuildHelperContainer>? buildContainers)
    {
        List<ShipSelector.ShipSelectorContainer> newShips = new();
        newShips.AddRange(buildContainers is null ? indexList.Select(index => new ShipSelector.ShipSelectorContainer(Guid.NewGuid(), index, null)) : buildContainers.Select(container => new ShipSelector.ShipSelectorContainer(Guid.NewGuid(), container.ShipIndex, container.BuildString)));
        shipContainers.AddRange(newShips);
    }

    private async Task<List<string>> StoreBuildsForCharts()
    {
        List<BuildHelper.BuildHelperContainer> buildContainers = new();
        List<string> shipIndexes = new();
        foreach (var container in shipContainers)
        {
            var vmCacheEntry = cacheService.GetOrDefault(container.Id);
            if (vmCacheEntry is not null)
            {
                buildContainers.Add(ShipStatsContainer.GetBuildHelperContainer(vmCacheEntry));
            }
            else
            {
                if (string.IsNullOrWhiteSpace(container.BuildString))
                {
                    buildContainers.Add(new(container.ShipIndex, string.Empty, null, null));
                }
                else
                {
                    var viewModel = await ShipStatsContainer.CreateViewModel(container.ShipIndex, Build.CreateBuildFromString(container.BuildString), Localizer);

                    List<(string, float)> modifiers = viewModel.UpgradePanelViewModel.GetModifierList();
                    modifiers.AddRange(viewModel.ConsumableViewModel.GetModifiersList());
                    modifiers.AddRange(viewModel.CaptainSkillSelectorViewModel?.GetModifiersList() ?? new List<(string, float)>());
                    modifiers.AddRange(viewModel.SignalSelectorViewModel?.GetModifierList() ?? new List<(string, float)>());

                    buildContainers.Add(new(container.ShipIndex, container.BuildString, modifiers, viewModel.ConsumableViewModel.ActivatedSlots));
                }
            }

            shipIndexes.Add(container.ShipIndex);
        }

        await BuildHelper.StoreBuildContainers(buildContainers);
        return shipIndexes;
    }

    private async Task OpenBallisticCharts()
    {
        var shipIndexes = await StoreBuildsForCharts();
        NavManager.NavigateTo($"/charts?shipIndex={string.Join(",", shipIndexes)}");
    }

    private async Task OpenAccelerationCharts()
    {
        var shipIndexes = await StoreBuildsForCharts();
        NavManager.NavigateTo($"/acceleration-charts?shipIndexes={string.Join(",", shipIndexes)}");
    }

    private void UpdateUrl()
    {
        var shipsString = string.Join(",", shipContainers.Select(x => x.ShipIndex));
        NavManager.NavigateTo($"/ship?shipIndexes={shipsString}");
    }

    private string GetStyle(Guid id)
    {
        if (mudTabs.ActivePanel is not null && mudTabs.ActivePanel.Tag.Equals(id))
        {
            return " background-color: rgba(0, 0, 0, 0.4);";
        }
        return string.Empty;
    }
}