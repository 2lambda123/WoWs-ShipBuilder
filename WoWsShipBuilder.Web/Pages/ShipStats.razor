@page "/ship"
@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Core.Services
@using WoWsShipBuilder.Web.Utility
@using WoWsShipBuilder.Core.Data
@using System.Diagnostics
@using WoWsShipBuilder.Core.Localization
@using WoWsShipBuilder.Core.Settings
@inherits ReactiveComponentBase<ShipViewModel>
@inject NavigationManager NavManager
@inject ILocalizer Localizer
@inject IAppDataService AppDataService
@inject AppSettings AppSettings

<PageTitle>Ship stats</PageTitle>

<MudPaper Outlined="true" Class="d-flex justify-center align-center ma-5">
    <MudImage Src="@(baseAddress + "_default.png")"/>
    <MudImage Src="@(baseAddress + "_default.png")"/>
    <MudImage Src="@(baseAddress + "_default.png")"/>
</MudPaper>

<MudContainer MaxWidth="MaxWidth.False">
    @if (!initialized)
    {
        <MudGrid>
            <MudItem xs="3">
                <MudStack>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px"/>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px"/>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="450px"/>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="450px"/>
                </MudStack>
            </MudItem>
            <MudItem xs="9">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100%"/>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudGrid>
            <MudItem xs="3">
                <MudStack>
                    <ShipModulesSelector ViewModel="@ViewModel?.ShipModuleViewModel"/>
                    <ShipUpgradeSelector ViewModel="@ViewModel?.UpgradePanelViewModel"/>
                    <ConsumableSelector ViewModel="@ViewModel?.ConsumableViewModel"/>
                    <CaptainSkillSelector ViewModel="@ViewModel?.CaptainSkillSelectorViewModel"/>
                    <SignalSelector ViewModel="@ViewModel?.SignalSelectorViewModel"/>
                </MudStack>
            </MudItem>
            <MudItem xs="9">
                @if (ViewModel?.ShipStatsControlViewModel?.CurrentShipStats is not null)
                {
                    <ShipStatsComponent ViewModel="@ViewModel?.ShipStatsControlViewModel"/>
                }
            </MudItem>
        </MudGrid>
    }
</MudContainer>


@code {

    private string baseAddress = @"https://wows-shipbuilder-data.s3.eu-central-1.amazonaws.com/images/ship/";

    private bool initialized;
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        NavManager.TryGetQueryString("shipIndex", out string shipIndex);
        NavManager.LocationChanged += HandleLocationChanged;
        await LoadShipViewModel(shipIndex);
        await ViewModel!.ShipStatsControlViewModel!.UpdateShipStats(ViewModel.ShipModuleViewModel.SelectedModules.ToList(), new());
        initialized = true;
    }
    
    private async Task LoadShipViewModel(string shipIndex)
    {
        var sw = new Stopwatch();
        sw.Start();
        var shipSummary = AppData.ShipSummaryList!.Single(x => x.Index.Equals(shipIndex));
        await AppDataService.LoadNationFiles(shipSummary.Nation);
        Console.WriteLine("Files loaded: " + sw.Elapsed);
        var ship = await AppDataService.GetShipFromSummary(shipSummary);
        var vmParams = new MainViewModelParams(ship!, shipSummary, null);
        
        // TODO
        ViewModel = new(null!, AppDataService, Localizer, AppSettings, vmParams);
        Console.WriteLine("VM created: " + sw.Elapsed);
        await ViewModel.InitializeData(vmParams);
        sw.Stop();
        Console.WriteLine("VM initizalized: " + sw.Elapsed);
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var uri = NavManager.Uri;
        if (uri.Contains("/ship"))
        {
            NavManager.TryGetQueryString("shipIndex", out string shipIndex);
            await LoadShipViewModel(shipIndex);
            StateHasChanged();
        }
        else
        {
            NavManager.LocationChanged -= HandleLocationChanged;
        }
    }
}