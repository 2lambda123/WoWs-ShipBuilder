@page "/ship"
@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Core.Services
@using WoWsShipBuilder.Web.Utility
@using WoWsShipBuilder.Core.Data
@using Prometheus
@using WoWsShipBuilder.Core.ConverterHelpers
@using WoWsShipBuilder.Core.Localization
@using WoWsShipBuilder.Core.Settings
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.Web.Services
@using System.Diagnostics
@inherits ReactiveComponentBase<ShipViewModel>
@inject NavigationManager NavManager
@inject ILocalizer Localizer
@inject IAppDataService AppDataService
@inject AppSettings AppSettings
@inject IHostEnvironment Environment
@inject IMetricsService MetricsService

<PageTitle>Ship stats</PageTitle>

<MudContainer MaxWidth="MaxWidth.False" Class="mt-3">
    @if (!(initialized && SettingsInitialized))
    {
        <MudGrid>
            <MudItem xs="12">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px"/>
            </MudItem>
            <MudItem xs="3">
                <MudStack>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px"/>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px"/>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="450px"/>
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="450px"/>
                </MudStack>
            </MudItem>
            <MudItem xs="9">
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100%"/>
            </MudItem>
        </MudGrid>
    }
    else
    {
        <MudGrid>
            <MudItem xs="12">
                <MudPaper Outlined="true" Class="d-flex justify-center align-end pa-1">
                    @if (ViewModel.PreviousShip is not null)
                    {
                        <MudStack Class="px-2" @onclick="@(_ => GoToShip(ViewModel.PreviousShip))">
                            <MudImage Width="105" ObjectFit="ObjectFit.ScaleDown" Src="@(BaseAddress + ViewModel.PreviousShip.Index + ".png")"/>
                            <MudStack Row="true" Justify="Justify.Center">
                                <MudIcon ViewBox="-1 0 24 10" Icon="@GetIconFromClass(ViewModel.PreviousShip.ShipClass, ViewModel.PreviousShip.Category)"/>
                                <MudText Align="Align.Center">@Localizer.GetGameLocalization(ViewModel.PreviousShip.Index).Localization</MudText>
                            </MudStack>
                        </MudStack>
                    }
                    <MudStack Class="px-2">
                        <MudImage Width="150" ObjectFit="ObjectFit.ScaleDown" Src="@(BaseAddress + ViewModel.CurrentShipIndex + ".png")" Style="@GetBackgroundFlag(ViewModel.CurrentShip.Nation, ViewModel.CurrentShipIndex)"/>
                        <MudStack Row="true" Justify="Justify.Center">
                            <MudIcon ViewBox="-1 0 24 10" Icon="@GetIconFromClass(ViewModel.CurrentShip.ShipClass, ViewModel.CurrentShip.Category)"/>
                            <MudText Align="Align.Center">@Localizer.GetGameLocalization(ViewModel.CurrentShipIndex).Localization</MudText>
                        </MudStack>
                    </MudStack>
                    @if (ViewModel.NextShips is not null)
                    {
                        @foreach (var ship in ViewModel.NextShips)
                        {
                            <MudStack Class="px-2" @onclick="@(_ => GoToShip(ship))">
                                <MudImage Width="105" ObjectFit="ObjectFit.ScaleDown" Src="@(BaseAddress + ship.Index + ".png")"/>
                                <MudStack Row="true" Justify="Justify.Center">
                                    <MudIcon ViewBox="-1 0 24 10" Icon="@GetIconFromClass(ship.ShipClass, ship.Category)"/>
                                    <MudText Align="Align.Center">@Localizer.GetGameLocalization(ship.Index).Localization</MudText>
                                </MudStack>
                            </MudStack>
                        }
                    }
                </MudPaper>
            </MudItem>
            <MudItem xs="3">
                <MudStack>
                    <ShipModulesSelector ViewModel="@ViewModel?.ShipModuleViewModel"/>
                    <ShipUpgradeSelector ViewModel="@ViewModel?.UpgradePanelViewModel"/>
                    <ConsumableSelector ViewModel="@ViewModel?.ConsumableViewModel"/>
                    <CaptainSkillSelector ViewModel="@ViewModel?.CaptainSkillSelectorViewModel" ShipClass="@ViewModel.CurrentShip.ShipClass"/>
                    <SignalSelector ViewModel="@ViewModel?.SignalSelectorViewModel"/>
                </MudStack>
            </MudItem>
            <MudItem xs="9">
                @if (ViewModel?.ShipStatsControlViewModel?.CurrentShipStats is not null)
                {
                    <ShipStatsComponent ViewModel="@ViewModel?.ShipStatsControlViewModel"/>
                }
            </MudItem>
        </MudGrid>
    }
</MudContainer>


@code {

        private const string BaseAddress = @"https://cdn.wowssb.com/images/individual/";

    private bool initialized;

    [CascadingParameter]
    protected bool SettingsInitialized { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        MetricsService.ShipPageCount.Inc();
        initialized = false;
        NavManager.TryGetQueryString("shipIndex", out string shipIndex);
        NavManager.LocationChanged += HandleLocationChanged;
        await LoadShipViewModel(shipIndex);
        await ViewModel!.ShipStatsControlViewModel!.UpdateShipStats(ViewModel.ShipModuleViewModel.SelectedModules.ToList(), new());
        initialized = true;
    }

    private async Task LoadShipViewModel(string shipIndex)
    {
        MetricsService.ShipCount.WithLabels(shipIndex).Inc();
        using (MetricsService.ShipViewModelInitDuration.NewTimer())
        {
            var shipSummary = AppData.ShipSummaryList!.Single(x => x.Index.Equals(shipIndex));
            await AppDataService.LoadNationFiles(shipSummary.Nation);
            var ship = await AppDataService.GetShipFromSummary(shipSummary);
            var vmParams = new MainViewModelParams(ship!, shipSummary);

            ViewModel = new(null!, AppDataService, Localizer, AppSettings, vmParams);
            await ViewModel.InitializeData(vmParams);
        }
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        string uri = NavManager.Uri;
        if (uri.Contains("/ship"))
        {
            initialized = false;
            NavManager.TryGetQueryString("shipIndex", out string shipIndex);
            await LoadShipViewModel(shipIndex);
            initialized = true;
            StateHasChanged();
        }
        else
        {
            NavManager.LocationChanged -= HandleLocationChanged;
        }
    }

    private string GetBackgroundFlag(Nation shipNation, string shipIndex)
    {
    // "'background-image: url("/assets/nation_flags/flag_" + ViewModel.CurrentShip.Nation + ".png\")
        string imgName = shipIndex;
        if (!File.Exists(Path.Combine(Environment.ContentRootPath, "wwwroot", "assets", "nation_flags", $"flag_{shipIndex}.png")))
        {
            imgName = shipNation.ToString();
        }
        return $"background-image: url(\"/assets/nation_flags/flag_{imgName}.png\"); background-size: cover";
    }

    private static string GetIconFromClass(ShipClass shipClass, ShipCategory category)
    {
        string path = ClassToPathHelper.GetSvgPathFromClass(shipClass);
        string stroke = ClassToPathHelper.GetColorFromCategory(category, true)[3..];
        string fill = ClassToPathHelper.GetColorFromCategory(category, false)[3..];
        return $"<path fill=\"#{fill}\" stroke=\"#{stroke}\" stroke-width=\"1\"  d=\"{path}\" />";
    }

    private void GoToShip(ShipSummary? shipSummary)
    {
        NavManager.NavigateTo($"/ship?shipIndex={shipSummary!.Index}");
    }

}