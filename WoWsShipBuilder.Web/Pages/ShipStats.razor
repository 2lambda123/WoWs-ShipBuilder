@page "/ship"

@using WoWsShipBuilder.Web.Utility
@using System.Collections.ObjectModel
@using System.Collections.Specialized
@using DynamicData

@inject NavigationManager NavManager
@inject ILocalizer Localizer

@implements IDisposable

<PageTitle>Ship stats</PageTitle>

@* HideSlider is set to true because of a bug. see https://github.com/MudBlazor/MudBlazor/issues/4742*@
<MudDynamicTabs Color="Color.Primary" Position="Position.Top" HideSlider KeepPanelsAlive AddTab="AddTab" CloseTab="RemoveTab" @ref="mudTabs" Elevation="2" PanelClass="pa-6" Outlined Border Class="pt-3">
    @foreach (var shipIndex in shipIndexes)
    {
        <MudTabPanel Style="@(GetStyle(shipIndex))" Text="@Localizer.GetGameLocalization(shipIndex).Localization" ID="@shipIndex" @key="shipIndex">
            <ShipStatsContainer ShipIndex="@shipIndex"/>
        </MudTabPanel>
    }
    @if (showNewShipTab)
    {
        <MudTabPanel Text="Adding new ship" Style="@(GetStyle(NewShipsTabId))" ID="@NewShipsTabId" @key="@NewShipsTabId">
            <MudGrid Class="flex-column align-center">
                <MudItem xs="12" sm="8">
                    <ShipSelector SelectedShips="@selectedShips"/>
                </MudItem>
                <MudItem xs="6" sm="4" Class="mt-3">
                    <MudButton Disabled="@(selectedShips.Count == 0)" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@AddShips" FullWidth="true" >
                        Add ships
                    </MudButton>
                </MudItem>
            </MudGrid>
        </MudTabPanel>   
    }
</MudDynamicTabs>
<MudScrollToTop TopOffset="100" Style="z-index:2001">
    <MudFab Color="Color.Info" StartIcon="@Icons.Filled.KeyboardDoubleArrowUp"/>
</MudScrollToTop>

@code {
    
    private const string NewShipsTabId = "NewShips";
    
    private MudTabs mudTabs;
    
    private readonly ObservableCollection<string> shipIndexes = new();
    
    private readonly ObservableCollection<string> selectedShips = new();

    private bool updateTab;

    private string tabId = string.Empty;

    private bool showNewShipTab;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        selectedShips.CollectionChanged += SelectedShipsOnCollectionChanged;
        // shipIndexes.CollectionChanged += UpdateTabs;
        NavManager.TryGetQueryString("shipIndexes", out string ships);
        if (!string.IsNullOrWhiteSpace(ships))
        {
            shipIndexes.AddRange(ships.Split(","));
        }
    }
    
    protected override void OnAfterRender(bool firstRender)
    {
        if (!updateTab) return;
        mudTabs.ActivatePanel(tabId);
        updateTab = false;
        StateHasChanged();

    }
    
    private void RemoveTab(MudTabPanel panel)
    {
        int index = shipIndexes.IndexOf(panel.ID);
        if (panel.ID.Equals(NewShipsTabId))
        {
            showNewShipTab = false;
        }
        else
        {
            shipIndexes.Remove((string) panel.ID);
        }

        if (mudTabs.ActivePanel.ID.Equals(panel.ID))
        {
            // If shipIndexes contains more element than index (meaning, index is not out of bound for the shipIndexes list), then we select the ship at the same index.
            // We do it with the ID because using the index makes the tab appear as blank ("display: none" in the style).
            // If the index is out of bound, we check if the shipIndexes has any element, in which case we take the last element of the list, since it means we removed the old last element.
            // Finally, if the list is empty, we check if the new ship tab is present. If it is, we select that one, otherwise we do nothing.
            if (shipIndexes.Count > index && index != -1)
            {
                mudTabs.ActivatePanel(shipIndexes[index]);
            }
            else if (shipIndexes.Count > 0)
            {
                mudTabs.ActivatePanel(shipIndexes.Last());
            }
            else if (showNewShipTab)
            {
                mudTabs.ActivatePanel(NewShipsTabId);
            }
        }
        UpdateUrl();
    }

    private void AddTab()
    {
        if (!showNewShipTab)
        {
            showNewShipTab = true;
            //the tab becomes available after it is rendered. Hence, we can't set the index here. We do it in the After render method.
            updateTab = true;
            tabId = NewShipsTabId;
        }
        else
        {
            mudTabs.ActivatePanel(NewShipsTabId);
        }
    }

    private void AddShips()
    {
        // we need to remove the ship addition tab first to avoid having an empty tab content.
        showNewShipTab = false;
        string lastSelectedShip = selectedShips.Last();
        selectedShips.Remove(shipIndexes);
        shipIndexes.AddRange(selectedShips);
        updateTab = true;
        tabId = lastSelectedShip;
        selectedShips.Clear();

        UpdateUrl();
    }

    private void UpdateUrl()
    {
        var shipsString = string.Join(",", shipIndexes);
        NavManager.NavigateTo($"/ship?shipIndexes={shipsString}");
    }
    
    private void SelectedShipsOnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        StateHasChanged();
    }
    
    public void Dispose()
    {
        selectedShips.CollectionChanged -= SelectedShipsOnCollectionChanged;
    }
    
    private string GetStyle(string shipIndex)
    {
        if (mudTabs.ActivePanel is not null && mudTabs.ActivePanel.ID.Equals(shipIndex))
        {
            return " background-color: rgba(0, 0, 0, 0.4);";
        }
        return string.Empty;
    }

}