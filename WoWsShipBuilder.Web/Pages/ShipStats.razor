@page "/ship"

@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Core.Services
@using WoWsShipBuilder.Web.Utility
@using WoWsShipBuilder.Core.Data
@using Prometheus
@using WoWsShipBuilder.Core.ConverterHelpers
@using WoWsShipBuilder.Core.Settings
@using WoWsShipBuilder.DataStructures
@using WoWsShipBuilder.Web.Services
@using WoWsShipBuilder.Core.BuildCreator
@using System.Collections.ObjectModel
@using System.Collections.Specialized
@using DynamicData

@inject NavigationManager NavManager
@inject ILocalizer Localizer
@inject IAppDataService AppDataService
@inject AppSettings AppSettings
@inject IHostEnvironment Environment
@inject IMetricsService MetricsService
@inject ISnackbar Snackbar

@implements IDisposable

<PageTitle>Ship stats</PageTitle>

@* HideSlider is set to true because of a bug. see https://github.com/MudBlazor/MudBlazor/issues/4742*@
<MudDynamicTabs Color="Color.Primary" Position="Position.Top" KeepPanelsAlive AddTab="AddTab" HideSlider="true" CloseTab="RemoveTab" @ref="mudTabs" Elevation="2" PanelClass="pa-6" Outlined Border Class="pt-3">
    @foreach (var viewModel in tabs)
    {
        if (viewModel is not null)
        {
            <MudTabPanel Text="@Localizer.GetGameLocalization(viewModel.CurrentShipIndex!).Localization" ID="@viewModel.CurrentShipIndex">
                <MudContainer MaxWidth="MaxWidth.False" Class="mt-n3">
                    <MudGrid>
                        <MudItem xs="12">
                            <MudPaper Outlined="true" Class="d-flex justify-center align-end pa-1">
                                @if (viewModel.PreviousShip is not null)
                                {
                                    <MudStack Class="px-2 cursor-pointer" @onmouseup="@(args => UpdateToShip(args, viewModel.CurrentShipIndex, viewModel.PreviousShip))" @oncontextmenu:preventDefault="true">
                                        <MudImage Width="@GetImageWidth(false)" ObjectFit="ObjectFit.ScaleDown" Src="@(BaseAddress + viewModel.PreviousShip.Index + ".png")"/>
                                        <MudStack Row="true" Justify="Justify.Center">
                                            <MudIcon ViewBox="-1 0 24 10" Icon="@GetIconFromClass(viewModel.PreviousShip.ShipClass, viewModel.PreviousShip.Category)"/>
                                            <MudText Align="Align.Center">@Localizer.GetGameLocalization(viewModel.PreviousShip.Index).Localization</MudText>
                                        </MudStack>
                                    </MudStack>
                                }
                                <MudStack Class="px-2">
                                    <MudImage Width="@GetImageWidth(true)" ObjectFit="ObjectFit.ScaleDown" Src="@(BaseAddress + viewModel.CurrentShipIndex + ".png")" Style="@GetBackgroundFlag(viewModel.CurrentShip.Nation, viewModel.CurrentShipIndex)"/>
                                    <MudStack Row="true" Justify="Justify.Center">
                                        <MudIcon ViewBox="-1 0 24 10" Icon="@GetIconFromClass(viewModel.CurrentShip.ShipClass, viewModel.CurrentShip.Category)"/>
                                        <MudText Align="Align.Center">@Localizer.GetGameLocalization(viewModel.CurrentShipIndex).Localization</MudText>
                                    </MudStack>
                                </MudStack>
                                @if (viewModel.NextShips is not null)
                                {
                                    @foreach (var ship in viewModel.NextShips)
                                    {
                                        <MudStack Class="px-2 cursor-pointer" @onmouseup="@(args => UpdateToShip(args, viewModel.CurrentShipIndex, ship))" @oncontextmenu:preventDefault="true">
                                            <MudImage Width="@GetImageWidth(false)" ObjectFit="ObjectFit.ScaleDown" Src="@(BaseAddress + ship.Index + ".png")"/>
                                            <MudStack Row="true" Justify="Justify.Center">
                                                <MudIcon ViewBox="-1 0 24 10" Icon="@GetIconFromClass(ship.ShipClass, ship.Category)"/>
                                                <MudText Align="Align.Center">@Localizer.GetGameLocalization(ship.Index).Localization</MudText>
                                            </MudStack>
                                        </MudStack>
                                    }
                                }
                            </MudPaper>
                        </MudItem>
                        @if (!(initialized && SettingsInitialized))
                        {
                            <MudItem xs="12" md="6" lg="4" xl="3">
                                <MudStack>
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="250px"/>
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100px"/>
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="450px"/>
                                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="450px"/>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="12" md="6" lg="8" xl="9">
                                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100%"/>
                            </MudItem>
                        }
                        else
                        {
                            <MudItem xs="12" md="6" lg="4" xl="3">
                                <MudStack>
                                    <ShipModulesSelector ViewModel="@viewModel?.ShipModuleViewModel"/>
                                    <ShipUpgradeSelector ViewModel="@viewModel?.UpgradePanelViewModel"/>
                                    <ConsumableSelector ViewModel="@viewModel?.ConsumableViewModel"/>
                                    <CaptainSkillSelector ViewModel="@viewModel?.CaptainSkillSelectorViewModel" ShipClass="@viewModel.CurrentShip.ShipClass"/>
                                    <SignalSelector ViewModel="@viewModel?.SignalSelectorViewModel"/>
                                </MudStack>
                            </MudItem>
                            <MudItem xs="12" md="6" lg="8" xl="9">
                                @if (viewModel?.ShipStatsControlViewModel?.CurrentShipStats is not null)
                                {
                                    <ShipStatsComponent ViewModel="@viewModel?.ShipStatsControlViewModel"/>
                                }
                            </MudItem>
                        }
                    </MudGrid>
                </MudContainer>
            </MudTabPanel>
        }
        else
        {
            <MudTabPanel Text="Adding new ship" ID="@NewShipsTabId">
                <MudGrid Justify="Justify.Center">
                    <MudItem xs="12">
                        <ShipSelector SelectedShips="@selectedShips"/>
                    </MudItem>
                    <MudItem xs="12" sm="8" Class="d-flex justify-center mt-3">
                        <MudButton Disabled="@(selectedShips.Count == 0)" Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="@AddShips" FullWidth="true">
                            Add ships
                        </MudButton>
                    </MudItem>
                </MudGrid>
            </MudTabPanel>
        }
    }
</MudDynamicTabs>
<MudScrollToTop TopOffset="100" Style="z-index:2001">
    <MudFab Color="Color.Info" StartIcon="@Icons.Filled.KeyboardDoubleArrowUp"/>
</MudScrollToTop>

@code {

    [CascadingParameter]
    private Breakpoint Breakpoint { get; set; }
    
    private const string BaseAddress = @"https://cdn.wowssb.com/images/individual/";
        
    private const string NewShipsTabId = "NewShips";

    MudTabs mudTabs;
    
    private bool initialized;

    private bool skipNextLocationChange;

    [CascadingParameter(Name = "SettingsInitialized")]
    protected bool SettingsInitialized { get; set; }

    private readonly List<ShipViewModel?> tabs = new();
    
    private readonly ObservableCollection<string> selectedShips = new();

    private bool updateTab;

    private string tabId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        selectedShips.CollectionChanged += SelectedShipsOnCollectionChanged;
        MetricsService.ShipPageCount.Inc();
        initialized = false;
        NavManager.TryGetQueryString("shipIndexes", out string shipIndexes);
        var indexes = shipIndexes.Split(",");

        foreach (var shipIndex in indexes)
        {
            var vm = await LoadShipViewModel(shipIndex);
            await vm.ShipStatsControlViewModel!.UpdateShipStats(vm.ShipModuleViewModel.SelectedModules.ToList(), new());
            tabs.Add(vm);
        }
        initialized = true;
    }
    
    private async Task<ShipViewModel> LoadShipViewModel(string shipIndex)
    {
        MetricsService.ShipCount.WithLabels(shipIndex).Inc();
        Build? build = null;
        using (MetricsService.ShipViewModelInitDuration.NewTimer())
        {
            if (NavManager.TryGetQueryString("build", out string buildString))
            {
                build = Build.CreateBuildFromString(buildString, Localizer);
                skipNextLocationChange = true;
                NavManager.NavigateTo($"/ship?shipIndexes={shipIndex}", false, true);
            }

            var shipSummary = AppData.ShipSummaryList!.Single(x => x.Index.Equals(shipIndex));
            await AppDataService.LoadNationFiles(shipSummary.Nation);
            var ship = await AppDataService.GetShipFromSummary(shipSummary);
            var vmParams = new MainViewModelParams(ship!, shipSummary, build);

            ShipViewModel vm = new(null!, AppDataService, Localizer, AppSettings, vmParams);
            await vm.InitializeData(vmParams);
            return vm;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (!updateTab) return;
        mudTabs.ActivatePanel(tabId);
        updateTab = false;
        StateHasChanged();
    }
    
    private string GetBackgroundFlag(Nation shipNation, string shipIndex)
    {
    // "'background-image: url("/assets/nation_flags/flag_" + ViewModel.CurrentShip.Nation + ".png\")
        string imgName = shipIndex;
        if (!File.Exists(Path.Combine(Environment.ContentRootPath, "wwwroot", "assets", "nation_flags", $"flag_{shipIndex}.png")))
        {
            imgName = shipNation.ToString();
        }
        return $"background-image: url(\"/assets/nation_flags/flag_{imgName}.png\"); background-size: cover";
    }

    private static string GetIconFromClass(ShipClass shipClass, ShipCategory category)
    {
        string path = ClassToPathHelper.GetSvgPathFromClass(shipClass);
        string stroke = ClassToPathHelper.GetColorFromCategory(category, true)[3..];
        string fill = ClassToPathHelper.GetColorFromCategory(category, false)[3..];
        return $"<path fill=\"#{fill}\" stroke=\"#{stroke}\" stroke-width=\"1\"  d=\"{path}\" />";
    }

    private async Task UpdateToShip(MouseEventArgs args, string currentIndex, ShipSummary? updateToShipSummary)
    {
        if (tabs.Any(x => x is not null && x.CurrentShipIndex!.Equals(updateToShipSummary!.Index)))
        {
            Snackbar.Add("The ship is already open in another tab", Severity.Warning, config => { config.CloseAfterNavigation = true; });
            tabId = tabs.First(x => x!.CurrentShipIndex!.Equals(updateToShipSummary!.Index))!.CurrentShipIndex!;
            updateTab = true;
            return;
        }
        var vm = await LoadShipViewModel(updateToShipSummary!.Index);
        await vm.ShipStatsControlViewModel!.UpdateShipStats(vm.ShipModuleViewModel.SelectedModules.ToList(), new());

        Console.WriteLine(args.Button);
        if (args.Button == 2)
        {
            tabs.Add(vm);
            updateTab = true;
            tabId = updateToShipSummary.Index;
        }
        else
        {
            var index = tabs.FindIndex(x => x is not null && x.CurrentShipIndex!.Equals(currentIndex));
            tabs[index] = vm;   
        }

        UpdateUrl();
    }

    private int GetImageWidth(bool isCurrentShip)
    {
        switch (Breakpoint)
        {
            case Breakpoint.Xs:
            case Breakpoint.Sm:
                return isCurrentShip ? 100 : 70;
            default:
                return isCurrentShip ? 150 : 105;
        }
    }

    private void RemoveTab(MudTabPanel panel)
    {
        if (panel.ID.Equals(NewShipsTabId))
        {
            tabs.RemoveAt(tabs.Count-1);
        }
        else
        {
            var index = tabs.FindIndex(tab => tab is not null && tab.CurrentShipIndex == (string)panel.ID);
            tabs.RemoveAt(index);
        }
    }

    private void AddTab()
    {
        if (!tabs.Contains(null))
        {
            tabs.Add(null);
            //the tab becomes available after it is rendered. Hence, we can't set the index here. We do it in the After render method.
            updateTab = true;
            tabId = NewShipsTabId;
        }
        else
        {
            mudTabs.ActivatePanel(NewShipsTabId);
        }
    }

    private async Task AddShips()
    {
        // we need to remove the ship addition tab (the "null" tab) first to avoid having an empty tab content.
        tabs.Remove(null);
        string lastSelectedShip = selectedShips.Last();
        selectedShips!.RemoveMany(tabs.Where(x=> x is not null).Select(x => x!.CurrentShipIndex));
        foreach (string shipIndex in selectedShips)
        {
            var vm = await LoadShipViewModel(shipIndex);
            await vm.ShipStatsControlViewModel!.UpdateShipStats(vm.ShipModuleViewModel.SelectedModules.ToList(), new());
            tabs.Add(vm);   
        }
        updateTab = true;
        tabId = lastSelectedShip;
        selectedShips.Clear();

        UpdateUrl();
    }

    private void UpdateUrl()
    {
        var allShipsIndexes = tabs.Select(x => x!.CurrentShipIndex).ToList();
        var shipsString = string.Join(",", allShipsIndexes);
        NavManager.NavigateTo($"/ship?shipIndexes={shipsString}");
    }
    
    private void SelectedShipsOnCollectionChanged(object? sender, NotifyCollectionChangedEventArgs e)
    {
        StateHasChanged();
    }
    
    public void Dispose()
    {
        selectedShips.CollectionChanged -= SelectedShipsOnCollectionChanged;
    }
}