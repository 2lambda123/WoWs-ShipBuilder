@page "/test"
@using WoWsShipBuilder.Core.Services
@using WoWsShipBuilder.Core.DataProvider.Updater
@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Web.Data
@using BlazorWorker.Core
@using BlazorWorker.BackgroundServiceFactory
@using BlazorWorker.Extensions.JSRuntime
@using BlazorWorker.WorkerBackgroundService
@using DnetIndexedDb
@using Newtonsoft.Json
@using WoWsShipBuilder.Web.Services
@using System.Diagnostics
@inject IDataService dataService
@inject ILocalDataUpdater dataUpdater
@inject IAppDataService appDataService
@inject AppSettingsHelper appSettingsHelper
@inject NavigationManager navigationManager
@inject IWorkerFactory workerFactory
<MudText Typo="Typo.h2">Test Page</MudText>

<MudButton OnClick="LoadNonExistentData" Color="Color.Secondary">Load non-existent data</MudButton>
<MudText >@nonExistentDataResult</MudText>

<MudButton OnClick="AddData" Color="Color.Secondary">Add data</MudButton>
<MudButton OnClick="GetData" Color="Color.Secondary" >Get data</MudButton>
<MudText>@dataResult</MudText>

<MudButton OnClick="StartUpdate" Color="Color.Secondary" >Start localization update</MudButton>
<MudButton OnClick="CheckLocales" Color="Color.Secondary" >Check installed locales</MudButton>
<MudButton OnClick="StartFullUpdate" Color="Color.Secondary" >Start full update</MudButton>

<MudSelect @bind-Value="selectedCulture" Style="max-width: 500px;">
    @foreach (var culture in AppConstants.SupportedLanguages)
    {
        <MudSelectItem Value="@culture">@culture.CultureInfo.DisplayName</MudSelectItem>
    }
</MudSelect>
<MudButton OnClick="SaveCultureChange" Disabled="AppData.Settings.SelectedLanguage == selectedCulture">Save culture change</MudButton>
<MudButton OnClick="TestWorker" >Test worker</MudButton>

    @if (loading)
    {
        <MudProgressCircular Color="Color.Success" Size="Size.Large" Indeterminate="true"/>
    }

<MudText>@output</MudText>

@code {

    private string nonExistentDataResult = string.Empty;

    private string dataResult = string.Empty;

    private int count;

    private CultureDetails selectedCulture = AppData.Settings.SelectedLanguage;

    private string output;

    bool loading;
    
    private async Task LoadNonExistentData()
    {
        var result = await dataService.LoadStringAsync("test.does.not.exist");
        nonExistentDataResult = result is null ? "Returned null, success" : "Returned not null, something went wrong";
    }

    private async Task AddData()
    {
        await dataService.StoreStringAsync("Teststring123-" + count++, "testing.teststring");
    }

    private async Task GetData()
    {
        dataResult = await dataService.LoadStringAsync("testing.teststring") ?? "err: not found";
    }

    private async Task StartUpdate()
    {
        await dataUpdater.UpdateLocalization(ServerType.Live);
    }

    private async Task CheckLocales()
    {
        Console.WriteLine(string.Join(", ", await appDataService.GetInstalledLocales(ServerType.Live)));
    }

    private async Task StartFullUpdate()
    {
        await dataUpdater.RunDataUpdateCheck(ServerType.Live, new Progress<(int, string)>());
    }

    private async Task SaveCultureChange()
    {
        AppData.Settings.SelectedLanguage = selectedCulture;
        await appSettingsHelper.SaveSettings(AppData.Settings);
        await StartUpdate();
        navigationManager.NavigateTo(navigationManager.Uri, true, false);
    }

    IWorkerBackgroundService<StartupWebWorkerService> startupService;
    IWorkerBackgroundService<WebWorkerTestService> service;

    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var serviceCollectionDependencies = new string[]
        {
            "Microsoft.Extensions.DependencyInjection.Abstractions.dll"
            , "Microsoft.Extensions.DependencyInjection.dll",
            "WoWsShipBuilder.Core.dll",
            "System.Diagnostics.Tracing.dll",
            "WoWsShipBuilder.DataStructures.dll",
            "NLog.dll",
            "JsonSubTypes.dll",
        };


        var worker = await workerFactory.CreateAsync();
        startupService = await worker.CreateBackgroundServiceAsync<StartupWebWorkerService>(wo => wo.AddConventionalAssemblyOfService().AddAssemblyOf<ServiceCollection>().AddAssemblies(serviceCollectionDependencies).AddBlazorWorkerJsRuntime().AddAssemblyOf<IndexedDbInterop>());
        
    }

    private async Task TestWorker()
    {
        loading = true;
        StateHasChanged();
        Stopwatch s = new();
        s.Start();
        if (service is null)
        {
            service = await startupService.CreateBackgroundServiceAsync(startup => startup.Resolve<WebWorkerTestService>());

        }
        
        var shell = await service.RunAsync(s => s.GetShip());
        s.Stop();
        if (shell is null)
        {
            output = "Error";
        }
        else
        {
            //var text = JsonConvert.SerializeObject(shell);
            output = s.Elapsed.ToString();
        }
        loading = false;
        StateHasChanged();
    }

}