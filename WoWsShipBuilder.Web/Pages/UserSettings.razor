@page "/settings"
@using WoWsShipBuilder.Core.Services
@using WoWsShipBuilder.Core.DataProvider
@using WoWsShipBuilder.Core.Settings
@using WoWsShipBuilder.Web.Data
@using WoWsShipBuilder.Web.Services

@implements IDisposable
@inject ILocalizer Localizer
@inject RefreshNotifierService RefreshNotifierService
@inject AppSettings AppSettings
@inject AppSettingsHelper AppSettingsHelper
@inject ISnackbar Snackbar

<PageTitle>@Localizer.GetAppLocalization(nameof(Translation.SettingsWindow_Settings)).Localization</PageTitle>

<MudContainer Style="padding-top: 1em;">
    <MudGrid Justify="Justify.Center">
        <MudItem xs="12">
            <MudCard Outlined>
                <MudCardHeader>
                    <CardHeaderAvatar>
                        <MudIcon Icon="@Icons.Filled.Info"/>
                    </CardHeaderAvatar>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@Localizer.GetAppLocalization(nameof(Translation.WebApp_ApplicationInfo)).Localization</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @Localizer.GetAppLocalization(nameof(Translation.WebApp_CurrentVersion)).Localization @AppData.DataVersion
                </MudCardContent>
            </MudCard>
        </MudItem>
        <MudItem xs="12">
            <MudSelect @bind-Value="selectedCulture" Style="max-width: 500px;" Label="@Localizer.GetAppLocalization(nameof(Translation.WebApp_SelectedLanguage)).Localization">
                @foreach (var culture in AppConstants.SupportedLanguages)
                {
                    <MudSelectItem Value="@culture">@culture.CultureInfo.DisplayName</MudSelectItem>
                }
            </MudSelect>
        </MudItem>
        <MudItem xs="12">
            <MudStack>
                <MudText Typo="Typo.h6">@Localizer.GetAppLocalization(nameof(Translation.WebApp_ExpanderSettingHeader)).Localization</MudText>
                <MudStack Row>
                    <MudSwitch @bind-Checked="@openMainExpandersByDefault" Label="@Localizer.GetAppLocalization(nameof(Translation.WebApp_ExpanderSetting)).Localization" Color="Color.Info"/>
                    <MudSwitch @bind-Checked="@openAmmoExpandersByDefault" Label="@Localizer.GetAppLocalization(nameof(Translation.WebApp_AmmoExpanderSetting)).Localization" Color="Color.Info"/>
                    <MudSwitch @bind-Checked="@openSecondariesAndAaExpandersByDefault" Label="@Localizer.GetAppLocalization(nameof(Translation.WebApp_SecondariesAndAAExpanderSetting)).Localization" Color="Color.Info"/>
                </MudStack>
            </MudStack>
            
        </MudItem>
        <MudItem xs="12"/>
        <MudItem xs="3">
            <MudButton FullWidth Variant="Variant.Outlined" Color="Color.Secondary" OnClick="SaveSettingsAsync">@Localizer.GetAppLocalization(nameof(Translation.SettingsWindow_Save)).Localization</MudButton>
        </MudItem>
        <MudItem xs="3">
            <MudButton FullWidth Variant="Variant.Outlined" Color="Color.Secondary" OnClick="ResetSettingsAsync">@Localizer.GetAppLocalization(nameof(Translation.SettingsWindow_Reset)).Localization</MudButton>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {

    [CascadingParameter(Name = "SettingsInitialized")]
    protected bool SettingsInitialized { get; set; }

    private CultureDetails selectedCulture = AppConstants.DefaultCultureDetails;

    private bool openMainExpandersByDefault = true;
    
    private bool openAmmoExpandersByDefault = true;

    private bool openSecondariesAndAaExpandersByDefault = true;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        RefreshNotifierService.RefreshRequested += UpdateSettingsValues;
        UpdateSettingsValues();
    }

    private void UpdateSettingsValues()
    {
        selectedCulture = AppSettings.SelectedLanguage;
        openMainExpandersByDefault = AppSettings.WebAppSettings?.OpenAllMainExpandersByDefault ?? true;
        openAmmoExpandersByDefault = AppSettings.WebAppSettings?.OpenAllAmmoExpandersByDefault ?? true;
        openSecondariesAndAaExpandersByDefault = AppSettings.WebAppSettings?.OpenSecondariesAndAAExpandersByDefault ?? true;

        StateHasChanged();
    }

    private async Task SaveSettingsAsync()
    {
        bool settingsChanged = AppSettings.SelectedLanguage != selectedCulture;
        AppSettings.SelectedLanguage = selectedCulture;

        if (AppSettings.WebAppSettings == null)
        {
            AppSettings.WebAppSettings = new();
            settingsChanged = true;
        }

        settingsChanged = settingsChanged || openAmmoExpandersByDefault != AppSettings.WebAppSettings.OpenAllAmmoExpandersByDefault;
        AppSettings.WebAppSettings.OpenAllAmmoExpandersByDefault = openAmmoExpandersByDefault;
        
        settingsChanged = settingsChanged || openMainExpandersByDefault != AppSettings.WebAppSettings.OpenAllMainExpandersByDefault;
        AppSettings.WebAppSettings.OpenAllMainExpandersByDefault = openMainExpandersByDefault;
        
        settingsChanged = settingsChanged || openSecondariesAndAaExpandersByDefault != AppSettings.WebAppSettings.OpenSecondariesAndAAExpandersByDefault;
        AppSettings.WebAppSettings.OpenSecondariesAndAAExpandersByDefault = openSecondariesAndAaExpandersByDefault;

        await AppSettingsHelper.SaveSettings(AppSettings);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
        Snackbar.Add("Settings saved", Severity.Success, config => { config.CloseAfterNavigation = true; });
        if (settingsChanged)
        {
            RefreshNotifierService.NotifyRefreshRequested();
        }
    }

    public void Dispose()
    {
        RefreshNotifierService.RefreshRequested -= UpdateSettingsValues;
    }

    private async Task ResetSettingsAsync()
    {
        AppSettings.ClearSettings();
        await AppSettingsHelper.SaveSettings(AppSettings);
        Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;
        Snackbar.Add(Localizer.GetAppLocalization(nameof(Translation.WebApp_SettingsSaved)).Localization, Severity.Success, config => { config.CloseAfterNavigation = true; });
        RefreshNotifierService.NotifyRefreshRequested();
    }

}